












--> OK..









QUANDO 




FALAMOS DOS CORE CONCEPTS DO DOCKER,

TEMOS 

2 
CONCEITOS 

EXTREMAMENTE CORE...












1) CONTAINERS 




2) IMAGES...















CONTAINERS -> SÃO 'BOXES' QUE VÃO CONTER NOSSO CÓDIGO E O ENVIRONMENT NECESSÁRIO 


PARA RODAR ESSE CÓDIGO...









E CADA CONTAINER FICA FOCADO TIPICAMENTE EM __1 ÚNICA TASK...


















TIPICAMENTE NÃO FAZEMOS MÚLTIPLAS COISAS EM 1 CONTAINER...









GERALMENTE RODAMOS 1 WEB SERVER,


__OU __ 

RODAMOS 1 FRONTEND,




__ OU __ 

RODAMOS 1 DATABASE...











MAS TIPICAMENTE NÃO FAZEMOS TUDO ISSO EM 1 CONTAINER...











A IDEIA, É CLARO,

É QUE 

TEMOS 


SMALL, LIGHTWEIGHT PACKAGES,


QUE SERÃO  DE FÁCIL REPRODUÇÃO... E DE FÁCIL COMPARTILHAMENTO...








'SHARABLE, REPRODUCIBLE ENVIRONMENT' 




LOCKED-IN,

DENTRO DAQUELE CONTAINER... -> ESSE É O MAIN SELLING POINT 

DE 

DOCKER CONTAINERS..










APRENDEMOS QUE ESSES CONTAINERS TAMBÉM SÃO 'STATELESS'...












--> É UM TERMO QUE O PROFESSOR NÃO USOU, MAS QUER DIZER QUE 

A 


 __ DATA_ QUE __ É ESCRITA EM 1 CONTAINER 

 É 

 __PERDIDA__ 

 SEMPRE QUE 


 1 CONTAINER É 'SHUT DOWN'... ----------> A ÚNICA EXCEÇÃO 



 SÃO 

 'VOLUMES',




 ANON VOLUMES E 


 NAMED VOLUMES...








 PODEMOS USAR VOLUMES PARA MIRROR OU 
 COPIAR 




 __ CERTOS FOLDERS, NO NOSSO CONTAINER,


 A FOLDERS NA NOSSA LOCAL HOST MACHINE...











 PORTANTO,

  A DATA NESSES VOLUMES VAI SOBREVIVER MESMO SE OS CONTAINERS FOREM SHUT DOWN...













--> OS CONTAINERS SÃO SEMPRE CRIADOS A PARTIR DE IMAGES...











--> OS CONTAINERS SÃO CRIADOS A PARTIR DE DOCKERFILES,




OU ENTÃO DE IMAGES, TIRADAS LÁ DO DOCKERHUB (MAS MESMO ESSAS IMAGES DO DOCKERHUB FORAM CRIADAS COM DOCKERFILES)...








E ESSAS IMAGES CONTÊM O _ CÓDIGO E O 


ENVIRONMENT, CONFORME DESCRITO NA DOCKERFILE.... O CONTAINER É 

APENAS UM 
EXTRA-THIN LAYER 


EM CIMA 

DA IMAGE,


E PODEMOS 


RODAR 



MÚLTIPLOS CONTAINERS A PARTIR 

DE 

1 
MESMA IMAGE --> ESSA É JUSTAMENTE A CORE  IDEA POR TRÁS DOS CONTAINERS,

QUE 

ELES 

SÃO SHARABLE 

E QUE 

PODEMOS CRIAR MÚLTIPLOS 

CONTAINERS 


A PARTIR DE 1 IMAGE...











IMAGES SÃO BLUEPRINTS PARA CONTAINERS...








--> AS IMAGES CONTÊM CODE + ENVIRONMENT... ----> AS IMAGES SÃO 

'READ-ONLY'... 








-> READ-ONLY ---> A IMAGE EM SI NÃO RODA,



ELA NÃO ESCREVE NENHUM CÓDIGO DENTRO DELA... -> SE VC RODA 1 CONTAINERR 



COM BASE EM 1 IMAGE 



E O CONTAINER GERA ALGUMA DATA,

ESSA DATA NÃO SERÁ ESCRITA NA IMAGE,

E SIM 

SERÁ 


APENAS 


escritA 

LÁ NO LAYER 


DO CONTAINER 'READ-WRITE', 


FINO CONTAINER READ-WRITE DO CONTAINER... (e em volumes, se vc definiu alguns, para esse container)...














--> E NOSSA IMAGE NUNCA MUDARÁ A PARTIR 



DO RUN DE CONTAINRS,



E PODE SER FACILMENTE COMPARTILHADA COM OUTRAS PESSOAS....












PODEMOS 


CRIAR A IMAGE 

POR MEIO DAS 

INSTRUCTIONS NA DOCKERFILE,



QUE 


CRIA BASICAMENTE MÚLTIPLOS LAYERS --> ISSO ASSEGURA 


QUE,



SE 

APENAS 1 INSTRUÇÃOZINHA MUDOU NA DOCKERFILE,




__ APENAS ESSE PASSO E PASSOS SEGUINTES TERÃO DE SER REEVALUATED E EXECUTADOS,






PQ __ OS LAYERS ANTERIORES JÁ ESTARÃO CACHEADOS --> É POR ISSO QUE 

O BUILD 


DE __ IMAGES __ 
É 


BEM EFICIENTE, E PODE SER BEM RÁPIDO...











1 CONTAINER É APENAS 1 EXTRA-THIN LAYER 




__ EM CIMA __ DA IMAGE,



QUE É CRIADO __ 'ANEW' A CADA 



__ NOVO CONTAINER QUE RODAMOS...









É ISSO QUE O DOCKER 

É... É ISSO QUE AS IMAGES E CONTAINERS SÃO.... E COMO TRABALHAM EM CONJUNTO...