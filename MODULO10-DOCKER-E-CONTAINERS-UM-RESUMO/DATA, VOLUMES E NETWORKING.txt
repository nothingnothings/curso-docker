







DOCKER CONTAINERS E DATA...

















--> BEM, É CLARO QUE O TRABALHO COM CONTAINERS SE TORNA 1 POUCO MAIS COMPLEXOO
 
 QUANDO 

 'DATA' ESTÁ ENVOLVIDA... ESPECIALMENTE 

 QUANDO 


 A DATA 


 __ NÃO PODE SER PERDIDA,




 QUANDO É NECESSÁRIO PERSISTIR NOSSA DATA...















 --> DATA QUE DEVE PERSISTIR MESMO QUANDO O CONTAINER FICA 'SHUT DOWN'..
 










 --> ISSO PQ, POR DEFAULT,

 DOCKERS SÃO ISOLATED E STATELESS --> ISSO SIGNIFICA QUE 

 ELES CONSEGUEM FAZER READ-WRITE DE DATA, SIM,





 __ MAS _ CADA __ DATA _ QUE __ ELES GERAM _ SERÁ 

 PERDIDA 




 QUANDO O CONTAINER FOR SHUT DOWN... -->  POR DEFAULT,





A DATA NÃO  É COMPARTILHADA COM O MUNDO EXTERNO,

E STATELESS 


SIGNIFICA QUE 'NÃO É SAVED  EM LUGAR ALGUM'...










APESAR DE POSSUÍREM SEU PRÓPRIO FILE SYSTEM,

ESSE FILE SYSTEM É DETACHED 

DA HOST MACHINE... -->  E OS CONTAINERS PODEM ARMAZENAR DATA,

MAS ESSA DATA SERÁ PERDIDA SEMPREQ QUE O CONTAINER FOR REMOVIDO...
















--> PODEMOS 'WORK AROUND'

ISSO,




COM 

BIND MOUNTS E COM VOLUMES....













-> TAMBÉM VIMOS OS COMANDOS PARA ADICIONAR BIND MOUNTS E VOLUMES:








BIND MOUNTS:


-v /local/path:/container/path 













VOLUMES (NAMED):


-v NAME:/container/path













OK.. A IDEIA PARA BIND MOUNTS É QUE 

'''TEMOS 1 CERTO PATH NA NOSSA HOST MACHINE, QUE CONHECEMOS,

QUE 

QUEREMOS _ MIRROR_ PARA DENTRO DE 1 PATH NO CONTAINER''' --> ISSO É TIPICAMENTE 


ÚTIL 

SE TEMOS ALGUM SOURCE-CODE/CONFIGURATION 




QUE DEVERÁ SER 'PICKED UP' PELO CONTAINER,



PRINCIPALMENTE DURANTE DEVELOPMENT...

















COM VOLUMES, NAMED VOLUMES,
 POR OUTRO  LADO,



 NOSSO CONTAINER FOLDER TAMBÉM É MIRRORED NO NOSSO LOCAL SYSTEM,


 MAS NÃO SABEREMOS 

 NECESSARIAMENTE O LOCAL EM QUE 

 ESSA DATA FICARÁ ARMAZENADA --> ISSO PQ __ NÃO PLANEJAMOS COLOCAR CONTEÚDO 

 DENTRO DESSE FOLDER,



 DE DENTRO DE NOSSA LOCAL MACHINE --> EM VEZ DISSO, 

 O VOLUME É SIMPLESMENTE USADO 



 PARA QUE 

 A DATA 

 GERADA 


 PELO 

 CONTAINER SOBREVIVA...











 --> ISSO PARA QUE A DATA FIQUE DISPONÍVEL 


 
 MAIS UMA VEZ,
  
  SE RODARMOS 

   1 NOVO CONTAINER, DEPOIS QUE O VELHO CONTAINER FOI REMOVIDO...









--> APRENDEMOS OS 2 EM DETALHES, AO LONGO DO CURSO...















--> VOLUMES: TEMOS NAMED VOLUMES E ANON VOLUMES...

















--> ESSES 2 VOLUMES PERSISTEM DATA..








--> ANON VOLUMES --> PODEM SER ÚTEIS PARA 

SALVAR 

DATA QUE 

SERIA 

'OVERWRITTEN' POR ALGUMA SETUP STEP





NO NOSSO CONTAINER, SE ISSO NÃO FOSSE SETTADO (

    vimos isso 


    COM O ANON VOLUME DE 'node_modules',


    QUE PROTEGE NOSSOS CONTAINERS DO OVERWRITE 

    DAS BIND MOUNTS...

)









-> 
OUTRO ASPECTO INTERESSANTE, QUANDO ESTUDAMOS CONTAINERS,


SÃO 

NETWORKS 

E CONTAINER-TO-CONTAINER 


COMMUNICATION...













CONTAINERS, POR DEFAULT,


SÃO ISOLATED --> ENTRETANTO,



ELES PODEM SER 'CONNECTED' 

E ENVIAR 

REQUESTS 

1 AO OUTRO,


E 

TAMBÉM PODEM 

ENVIAR 

REQUESTS 


AO MUNDO EXTERIOR...













--> OK... E ENVIAR REQUESTS AO OUTSIDE WORLD É FÁCIL,


 
 MAS A PARTE MAIS TRICKY É QUANDO QUEREMOS TER CONTAINER-TO-CONTAINER 


 COMMUNICATION..








 AS OPÇÕES PARA COMUNICAR ENTRE CONTAINERS ERAM:








1) DETERMINAR/VER O IP ADDRESS DO CONTAINER A QUE O OUTRO CONTAINER DEVE SE COMUNICAR,
E AÍ 
USAR ESSE IP ADDRESS --> MTAS DESVANTAGENS,  PQ O IP PODE MUDAR, E HÁ MT UNECESSARY WORK...










2) A MANEIRA MAIS CONVENIENTE DE CONECTAR CONTAINERS,

A ALTERNATIVA MAIS RECOMENDADA,

É CRIAR 1 DOCKER NETWORK  


E ADICIONAR TODOS OS CONTAINERS QUE DEVEM CONSEGUIR 

ESTABELECR COMUNICAÇÃO ENTRE SI,

DENTRO DAQUELA NETWORK... ---> COM ISSO,


VC PODERÁ 

SIMPLESMENTE 


USAR 


O 'CONTAINER NAME'


COMO ADDRESS,


E AÍ 
O 

DOCKER SERÁ CAPAZ DE 
AUTOMATICALLY RESOLVE O IP ADDRESSES DESSES UNDERLYING CONTAINERS...





(É ISSO QUE APRENDEMOS DURANTE A SECTION DE NETWORKS)... -> isso deixa o trabalho com containers 


E MULTI-CONTAINER PROJECTS BEM MAIS SIMPLES...