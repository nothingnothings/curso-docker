








LOCAL HOST(development) VS REMOTE HOST (PRODUCTION)...















ok... esses eram os core DOCKER E CONTAINER CONCEPTS...











--. AGORA TEMOS 2 MAIN AREAS EM QUE PODEMOS USAR ESSES CONCEPTS...









1) LOCAL --> NA NOSSA LOCAL MACHINE,
PARA DEVELOPMENT 

E PARA 

TER REPRODUCIBLE E ISOLATED DEVELOPMENT ENVIRONMENTS....









2) EM REMOTE HOSTS- -> REMOTE MACHINES,




QUANDO QUEREMOS DEPLOYAR 1 APP COM O DOCKER...




















NO NOSSO LOCAL HOST,

O 

DOCKER É ÓTIMO,

PQ 


TEMOS 
'ISOLATED, ENCAPSULATED, REPRODUCIBLE DEVELOPMENT ENVIRONMENTS'...








--> e esses ENVIRONMENTS NÁO 
VÁO `CLASH``  COM QUAISQUER OUTROS 


ENVIRONMENTS QUE TEMOS NO NOSSO SISTEMA,





E NÃO TEREMOS NENHUMA 


CROSS-DEPENDENCIES,



E 




EM QUE 

O DEVELOPMENT,

NA NOSSA 

LOCAL MACHINE,

SE TORNA 



MT CONVENIENTE E EASY TO MANAGE...
















--> MESMO SE VC NUNCA FIZER DEPLOY DE SUAS DOCKERIZED APPLICATIONS,

 O DOCKER AINDA É UMA FERRAMENTA ÓTIMA...













 HÁ MTOS DEVS QUE 
 USAM 

  O DOCKER APENAS LOCALMENTE,



  NOS SEUS SISTEMAS,

  PARA TER ESSES PROJETOS ISOLADOS,


E PARA 

EVITAR CLASHES ENTRE VERSIONS E RUNTIMES QUANDO 



ESTÃO TRABALHANDO COM MÚLTIPLOS PROJECTS --> É POR ISSO QUE 


O DOCKER 



NÃO ESTÁ 




AQUI SÓ PARA DEPLOYAR CONTAINERS EM REMOTE MACHINES E PARA EXPOR SEU APP A USERS DE VERDADE,



PQ _ ELE _ TAMBÉM É PERFEITO 


PARA _ 








O USO LOCAL,


PQ OFERECE UM MONTE DE ADVANTAGES...













--> MAS É CLARO QUE 
TAMBÉM PODEMOS 

DEPLOYAR NOSSOS CONTAINERS EM REMOTE MACHINES,

EM REMOTE HOSTS...










--> MAS PQ ISSO É ÓTIMO EM REMOTE HOSTS, TAMBÉM?









--> TAMBÉM É PQ TEMOS 'ISOLATED, ENCAPSULATED, REPRODUCIBLE ENVIRONMENTS' -> O CÓDIGO CONTINUA O MESMO,

NÃO HÁ SURPRESAS INDESEJADAS,

PQ 

TUDO VAI FICAR NA IMAGE,


NA IMAGE DO CONTAINER...











--> O UPDATE DE CONTAINERS TAMBÉM E´SUPER SIMPLES,

PQ 


APENAS TEMOS DE SUBSTITUIR 1 EXISTING CONTAINER 

COM 

1 UPDATED ONE (que terá o UPDATED SOURCE CODE) ---> É SÓ ISSO,


NÃO 


HÁ 

PROCESSOS COMPLEXOS DE UPDATE ENVOLVIDOS...















--> É POR ISSO QUE O DOCKER É ÓTIMO TANTO PARA DEVELOPMENT COMO PARA PRODUCTION...











--> TALVEZ VC TENHA 1 MONTE DE SIDE-PROJECTS QUE SE BENEFICIE DISSO...











--> TALVEZ VC N USE DOCKER CONTAINERS NO SEU APP EM PRODUCTION PQ 



ELE PODE FICAR COMO 'OVERHEAD' DEMAIS...