
















--> CERTO...









NÃO É TÃO DIFÍCIL USAR 



O MONGODB ATLAS 


COM 



O 'ECS'... ->  PRIMEIRAMENTE,


QUEREMOS 

NOS LIVRAR 







DO MONGO CONTAINER... --> PQ AGORA VAMOS USAR O MONGODB ATLAS, EXTERNO A NOSSA CONTA AWS...














----> ENTRETANTO, QUEREMOS PASSAR, AO CONTAINER BACKEND NODE APP,




OS VALUES PARA AS ENVIRONMENT VARIABLES 

DE 


'MONGODB_USERNAME'

'MONGODB_PASSWORD'

'MONGODB_URL'


E 

'DATABASE_NAME',






TUDO PARA QUE 




SEJA POSSÍVEL 





CONECTAR A ESSE SERVIÇO MONGODB ATLAS,


EM 1 DATABASE (dentro do cluster de nossa conta)

DISTINTA 

DAQUELA USADA EM DEVELOPMENT...














--> É POR ISSO QUE O PROFESSOR VAI CRIAR 1 NOVA TASK DEFINITION PARA 


NOSSA TASK DE 'goals' --> ELE VAI CRIAR 1 NOVA REVISION --> DEIXAMOS TODAS AS CONFIGURAÇÕES 



QUE 


COLOCAMOS ANTERIORMENTE,



COM A EXCEÇÃO DO MONGODB CONTAINER,




QUE AGORA SERÁ DELETADO --> DELETAMOS ESSE CONTAINER DA LISTA, ESSE CONTAINER MONGO....











TAMBÉM VAMOS NOS LIVRAR DE TODOS OS RECURSOS VINCULADOS A ESSE CONTAINER,



QUE NO CASO 

ERA 


AQUELE VOLUME DE 'EFS' (elastic file system),


AQUELE FILE SYSTEM EM QUE ESTÁVAMOS 



ARMAZENANDO NOSSOS DADOS....















--> DELETADO ESSE VOLUME,

PODEMOS TAMBÉM 

DELETAR 

O SECURITY GROUP QUE TÍNHAMOS CRIADO 



APENAS PARA USAR COM ESSE FILE SYSTEM (


    O PROFESSOR GOSTA DE MANTER AS COISAS 'CLEAN',

    PARA QUE 

    NÃO TENHAMOS 


    RECURSOS DESNECESSÁRIOS RODANDO NA AWS...
)












--> CERTO... ISSO FEITO,


NA PÁGINA DE 'TASK DEFINITION',

QUEREMOS 


AGORA 

TROCAR 

A CONFIGURATION 



DO 'NODE BACKEND',



DO NODE API 

CONTAINER... --------> ELE VAI FICAR A MESMA COISA DE ANTES,





MAS OS VALUES DAS ENVIRONMENT VARIABLES MUDARÃO:





   


   MONGODB_URL --> ERA 'localhost',


   mas agora ficará 

   a URL DO CLUSTER DO MONGODB ATLAS...

   ('cluster0.ntrwp.mongodb.net')...









   MONGODB_USERNAME = meuUser 



   MONGODB_PASSWORD = meuPassword 


   DATABASE_NAME=prodDatabase 













--> A VARIABLE 'DATABASE_NAME'


É NOVA,

E SERÁ USADA PARA 


ARMAZENARMOS A NOSSA DATA EM DATABASES DIFERENTES,


DENTRO DESSE MESMO CLUSTER MONGODB ATLAS..














--> OK... ISSO FEITO,

CLICAMOS EM UPDATE,

E AÍ 
CRIAMOS 
ESSA 

NOVA TASK REVISION... ->  E  AÍ UPDATAMOS NOSSO SERVICE,

PARA QUE 

ELE FAÇA 

REDEPLOY DE SI MESMO,



REEXECUTE ESSA TASK...




















--> OK... COM ISSO, PODEMOS VOLTAR À PLATFORM VERSION DE 'LATEST'..









--> CLICAMOS EM 'FORCE NEW DEPLOYMENT', 


SKIP AND REVIEW,



e aí 'UPDATE SERVICE'...















--> COM ISSO,

ESSE SERVICE 

VAI SUBSTITUIR 

A CURRENTLY RUNNING TASK COM 1 NOVA TASK,


COM BASE 


NESSAS NOVAS SETTINGS..











COM ISSO TERMINADO,

TEREMOS NOSSO APP UP AND RUNNING,

MAS 
AGORA 




COM ESSE APP __ CONECTADO _A ESSA CLOUD MONGODB SERVICE...

















--> ISSO SIGNIFICA QUE, NO FUTURO,

NÃO VAMOS TER QUE NOS PREOCUPAR 

COM ESSA DATABASE AT ALL --> É FULLY MANAGED PARA NÓS,

E OS 



BACKUPS TAMBÉM..



 


 E PODEMOS 

 MANAGEAR E CONFIGURAR ESSA DATABASE __ LÁ __ 



 DA INTERFACE 


 DO MONGODB ATLAS... (que não tem nada a ver com aws e containers),



 MAS QUE 

 FAZ 

 MUITO MAIS SENTIDO DO  QUE 
 DATABASE 

 CONTAINERS... --> PQ DATABASE CONTAINERS 


 TRAZEM 

 COMPLEXIDADE DESNECESSÁRIA...















COM ISSO, ESPERAMOS 


PELA NOVA TASK REVISION,



PELO NOVO 'UP AND RUNNING' 

DESSA TASK,







E, PORTANTO,




O NOSSO NOVO NODE API CONTAINER FICAR 'UP AND RUNNING',



E AÍ 

TENTAMOS DE NOVO....












-> OK...








--> AGORA SÓ MINHA 'LATEST TASK'

está up and running... que é o que quero...












-> A LOAD BALANCING URL NÃO MUDOU,

O QUE QUER DIZER QUE 

AINDA 


PODEMOS A UTILIZAR...











-> DISPARAMOS UM REQUEST A 'myDomain.com/goals'...















E ESSE DISPARO DE REQUEST VAI _ FALHAR__... ----> VAI FALHAR PQ....













--> VAI FALHAR PQ __ NÃO REBUILDAMOS NOSSA IMAGE E AINDA 

NÃO FIZEMOS 
PUSH 

DESSA NOVA IMAGE 

LÁ NO DOCKERHUB...








--> CASO CONTRÁRIO,
RESTARTAMOS ESSA TASK AINDA 
COM BASE 

NA 


VELHA IMAGE,

QUE AINDA VAI TENTAR SE CONECTAR AO MONGODB CONTAINER (

    ou seja,

    essa image VELHA ainda não tem a connection string ao MONGODB ATLAS,

    em vez do 

    mongodb CONTAINER...
)












-> PRECISAMOS FAZER REPUSH 
DE NOSSAS IMAGES,

SE 


ALTERAMOS NOSSO CÓDIGO...











--> OK...





O PROFESSOR 


JÁ NOMEIA 

NOSSA IMAGE COMO 'nothingnothings/goals-node',






E AÍ 







FAZ PUSH DESSA IMAGE AO DOCKERHUB...












OK... COM ISSO ACABADO,

E DE VOLTA AO APP DO 'goals-service',



O PROFESSOR FORÇA 1 NOVO DEPLOYMENT, QUE VAI FAZER PULL DESSA LATEST IMAGE...










OK... AGORA TEMOS NOSSO CONTAINER UP AND RUNNING MAIS UMA VEZ,

MAS AGORA COM ESSE CÓDIGO QUE SE CONECTA AO MONGODB ATLAS...





COMO NOSSA DATABASE AGORA É MANAGEADA POR 1 CLOUD PROVIDER,

E RODANDO TOTALMENTE DETACHED DE NOSSOS CONTAINERS,

A DATA 

VAI AUTOMATICAMENTE PERSIST,

PQ 

O 

MONGODB ATLAS VAI FAZER ISSO AUTOMATICMAENTE PARA NÓS...














--> OK... MAS SE VC É UM EXPERT EM TUDO ISSO,

1 CLOUD EXPERT,

CONSEGUE 

MANAGEAR TUDO POR CONTA PRÓPRIA,

VC 
NÃO 

PRECISA 

FAZER ESSE SWITCH --> MAS SE VC QUER CONSTRUIR 1 BIG APP ,


E NÃO É UM DATA ADMINISTRATION EXPERT,



E NÃO QUER LIDAR COM AVAILABILITY,

E MÚLTIPLAS DATABASE NODES E BACKUPS,

AÍ 


usar 


MANAGED DATABASES, COMO ESSA, PODEM VALER A PENA...