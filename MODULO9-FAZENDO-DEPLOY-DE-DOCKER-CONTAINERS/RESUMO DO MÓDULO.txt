








--> OK.. COM ISSO, ACABAMOS COM ESTE MÓDULO...








FOI 1 MÓDULO GIGANTE..













COMEÇAMOS ENTENDENDO:




1) DOCKER CONTAINERS SEMPRE FUNCIONAM DA MESMA FORMA,

E QUE PODEM NOS AJUDAR LOCALMENTE, NA NOSSA MÁQUINA, EM DEVELOPMENT, 

E EM PRODUCTION...











2) VIMOS, EM GRANDE DETALHE,

COMO __ PODEMOS BUILDAR IMAGES E ENTÃO RODAR CONTAINERS COM BASE NESSAS IMAGES LOCALMENTE,
NA NOSSA MÁQUINA...












3) NESSE MÓDULO, VIMOS COMO PODEMOS PEGAR ESSES MESMOS CONTAINERS E 

OS DEPLOYAR 

_ NA AWS... ---------> OU PELA INSTALAÇÃO DO DOCKER EM 1 INSTNACE/REMOTE MACHINE 

ALUGADA,

COMO O AWS EC2,



OU 

POR MEIO DO USO DE UM MANAGED SERVICE,

COMO O ECS...












4) O PROFESSOR RESSALTOU ALGUMAS DAS COISAS QUE DEVEMOS TER EM MENTE,

COMO 


O __ FATO__ DE QUE BIND MOUNTS __ É UMA COISA USADA PRIMARIAMENTE 



EM DEVELOPMENT,

PARA 'MIRROR'

O NOSSO LIVE CODE__ PARA DENTRO DE 1 CONTAINER...  E QUE BIND MOUNTS NÃO 

SÃO 

USADOS 


EM PRODUCTION...










5) O PROFESSOR TAMBÉM MOSTROU MULTI-STAGE BUILDS EM DOCKERFILES.. -> ESSE RECURSO 

É USADO EM APPLICATIONS QUE REQUEREM 1 BUILD STEP (


    COMO O REACT APP,
    QUE NOS FORÇA A __ RODAR 'npm run build'

    E OBTER SUAS FILES DE PRODUCTION, ANTES DE FAZER SERVE COM ALGUM WEBSERVER,

    COMO FIZEMOS COM O 'nginx'...
)




-> ESSA É UMA FEATURE PODEROSA,

o multi-stage,


pq 


QUER DIZER QUE 


PODEMOS USAR O DOCKER PARA DEPLOYAR APPLICATIONS QUE 


__ NÃO FUNCIONARIAM SEM UMA BUILD STEP EXTRA...









6) VIMOS COMO PODEMOS DEPLOYAR MÚLTIPLOS CONTAINERS EM 1 MESMO HOST (mesma task),


MAS TAMBÉM COMO 

PODEMOS 




splittar esse hosting em múltiplos hosts (múltiplas tasks),



E, PORTANTO, 



RODÁ-LOS EM DIFERENTES URLS...










7) VIMOS O TRADE-OFF ENTRE MAIOR CONTROLE  E MENOR SEGURANÇA VS MENOR CONTROLE E MAIOR SEGURANÇA...










VIMOS COMO INSTALAR O DOCKER EM UMA REMOTE MACHINE,

E AÍ 

COMO 


USAR A DOCKER INSTALLATION NESSA MACHINE 

PARA PULLAR IMAGES DO DOCKERHUB 

PARA 



RODAR  AS IMAGES LÁ...











--> OK... MAS POR CONTA DA RESPONSABILIDADE EXTRA 


ADVINDA DO USO DO EC2,

ISSO TALVEZ 

NÃO SEJA 


A MELHOR 
ALTERNATIVA 

PARA OS APPS QUE VC CONSTRUIRÁ..











--> VC PODE COMETER ERROS,

POR ISSO àS VEZES É MELHOR USAR O 'ECS'...







--> OCS É 
ÓTIMO SE VC SÓ QUER DEPLOYAR DE FORMA SIMPLES SEUS APPS E CONTAINERS...















---> VIMOS COMO O ECS FUNCIONA,

COMO PODEMOS DEPLOYAR NOSSOS CONTAINERS COMO TASKS,






ETC ETC...









VIMOS OUTROS RESOURCES DA AWS,

COMO O 'EFS',

ELASTIC FILE SYSTEM,

QUE 

ADICIONA 

1 FILE SYSTEM AO NOSSO CONTAINER,

QUE 



ADICIONA VOLUMES AOS NOSSOS CONTAINERS,


PARA QUE 

DATA 

NÃO SEJA PERDIDA NOS NOSSOS CONTAINERS SE 1 CONTAINER É REDEPLOYADO 

OU SIMPLESMENTE DELETADO...
















-> VIMOS  



TAMBÉM 


O 'SPECIAL ROLE'


DE DATABASES 




NO HOSTING...














--> DE NOVO, TEMOS O TRADE-OFF:









PODEMOS:


1) USAR DATABASES EM CONTAINERS... -. MAS AÍ TEMOS QUE FAZER 'MANAGE' DOS NOSSOS CONTAINERS...






AÍ TEMOS ASPECTOS COMO BACKUPS, SECURITY, PERFORMANCE, SCALING,



QUE 


PODEM SER DESAFIADORES... -> É POR ISSO QUE O PROFESSOR 


RECOMENDA PELO MENOS A CONSIDERAÇÃO 



ED 



1 'MANAGED DATABASE SERVICE',



COMO 


'AWS RDS',


'MONGODB ATLAS'.. ---> ISSO TE DEIXA FOCAR 




NOS CONTAINERS 


DO SEU APP,

COMO O FRONTEND 

APP 

E 

O 



NODEJS REST API...











--> OK... NESSE MÓDULO SAÍMOS DE 1 SETUP INICIAL ASSIM: 



(


1 CONTAINER NODE RESTJS API (COM LOAD BALANCER)



1 CONTAINER MONGODB, COM VOLUME (EFS) 



)



E AÍ 




FOMOS PARA ESTE SETUP:







(


1 CONTAINER NODE RESTJS API (COM LOAD BALANCER)



USO DE SERVIÇO THIRD-PARTY DE MANAGEMENT DE DATABASE, MONGODB ATLAS...



)











PARA ENTÃO SEGUIRMOS PARA ESTE SETUP (qUE NÃO FUNCIONOU):








(


1 CONTAINER NODE RESTJS API (COM LOAD BALANCER)


1 CONTAINER FRONTEND REACT (COM LOAD BALANCER)


USO DE SERVIÇO THIRD-PARTY DE MANAGEMENT DE DATABASE, MONGODB ATLAS...


--> ESSE APPROACH NÃO FUNCIONOU PQ OS 2 CONTAINERS ESTAVAM RODANDO 

2 WEB SERVERS,

2 WEB SERVERS SENDO RODADOS EM 1 MESMA TASK DA ECS _ NÃO FUNCIONA,

JUSTAMENTE PQ NÃO É POSSÍVEL RODAR 2 WEB SERVERS EM 1 MESMA MACHINE...


)





para então FINALMENTE CHEGARMOS NESTE SETUP AQUI:










(


1 CONTAINER NODE RESTJS API (COM LOAD BALANCER)


1 CONTAINER FRONTEND REACT  (COM LOAD BALANCER)


USO DE SERVIÇO THIRD-PARTY DE MANAGEMENT DE DATABASE, MONGODB ATLAS...


--> ESSE APPROACH FUNCIONOU,

PQ 
FICAMOS 

COM 

MÚLTIPLOS CONTAINERS,

RODANDO EM DIFERENTES TASKS (tipo hosting machines) NA 

AWS ECS... -> COM ISSO, FINALMENTE FICAMOS 


COM 1 SETUP EM QUE 


FOMOS CAPAZES DE RODAR TUDO 


QUE QUERÍAMOS RODAR,


FULLY DEPLOYED NA CLOUD...

)















--> SEMPRE HÁ MAIS COISAS QUE PODEMOS APRENDER... --> PRINCIPALMENTE A RESPEITO 


DA AWS...









-> HÁ MAIS COISAS QUE PODEMOS MEXER NA AWS...









--> DEVEMOS APRENDER MAIS SOBRE A AWS E AS COISAS QUE PODEMOS USAR, LÁ....








--> O PROFESSOR MOSTROU APENAS 1 EXEMPLO,


ALGUMAS DAS CHALLENGES QUE PODEMOS ENFRENTAR NA AWS,







E O CONFRONTO ENTRE 'FULL CONTROL' E 'MANAGED SERVICES'....














-->  O  FOCO PRIMÁRIO DESSE CURSO É O DOCKER... APRENDEMOS MTAS FEATURES 


DO DOCKER NESSE MÓDULO...









--> APRENDEMOS QUE CONTAINERS PODEM RODAR EM DIFERENTES ENVIRONMENTS,
E QUE 

REALMENTE APENAS É NECESSÁRIO TER O DOCKER PARA RODAR ESSES CONTAINERS...










--> APRENDEMOS SOBRE MULTI-STAGE BUILDS,

MULTI-STAGE DOCKERFILES...









--> APRENDEMOS SOBRE ENVIRONMENT VARIABLES EM AÇÃO...







--> APRENDEMOS A USAR O DOCKER LOCALMENTE, COM 'DOCKER-COMPOSE',

E O QUE SIGNIFICA DEPLOYAR O DOCKER EM 


1 REMOTE HOST (sem o docker-compose)...











-> E SE VC PLANEJA USAR O DOCKER APENAS LOCALMENTE,

COM o 'docker-compose',


ISSO É TOTALLY FINE...










--> MAS O PROFESSOR NOS QUERIA DAR A BIG PICTURE,

O FULL TOOL SET,

PARA QUE PÓSSAMOS USAR O DOCKER ONDE QUISERMOS... 