













--> OK... 









ATÉ AGORA,




NÓS TEMOS:








1) NOSSO RUNNING SERVICE, COM 1 ÚNICA TASK,

EM QUE TEMOS, 

DENTRO DA TASK,



2 CONTAINERS,

OS CONTAINERS 

DE NODE-APP 

E 

MONGODB...














2) NÓS TAMBÉM ADICIONAMOS 1 VOLUME AO MONGODB, COM O 'EFS',

PARA 
QUE 


NOSSA DATA FIZESSE 'PERSIST'...





















---> NOSSA ARCHITECTURE ATUAL ESTÁ ASSIM:












AWS ECS ----> ESTAMOS USANDO ISSO, O ELASTIC CONTAINER SERVICE,

ESSE MANAGED SERVICE PARA CONTAINERS...






-- DENTRO DO ECS,


ESTAMOS COM 1 TASK, COM 2 CONTAINERS NO SEU INTERIOR (com 'NODEJS REST API' e 'MONGODB' containers)...
















BEM... PARA _ PERSISTIR _ A DATA _ DESSA DATABASE,

DA DATABASE MONGODB,


AO LONGO 


DE 'TASK AND CONTAINER REMOVALS' (re-deploys),





ESTAMOS USANDO 1 VOLUME.... VOLUME QUE FOI IMPLEMENTAOD 



COM A AJUDA DO 


EFS,




AWS EFS --------------------> É UM STORAGE SYSTEM OFERECIDO PELO AWS --> GARANTE QUE A DATA É ARMAZENADA EM UM HARD DRIVE, E QUE A DATA NÃO SERÁ APAGADA SEMPRE QUE 1 CONTAINER FOR 'REMOVED' E 'RESTARTED'...






















-> OK... ATÉ O MOMENTO,

SEMPRE QUE 


alguém quer interagir com 



NOSSO APP,

ELE VAI INTERAGIR 



COM 




O NOSSO NODEJS REST API --> PQ ESSE É  O WEB APP QUE 

ESTAMOS EXPONDO AO PUBLIC,

AO MOMENTO...















-> ESTAMOS EXPONDO ESSA REST API COM 

A AJUDA DE 1 'LOAD BALANCER',


PARA TERMOS 

1 UNIQUE URL 


__ QUE NÃO MUDA (mesmo se tasks forem resettadas)... --> ESSE LOAD BALANCER 


ENTÃO 


FORWARDA O INCOMING REQUEST 


AO 

'NODEJS REST 
API',

QUE 

TIPICAMENTE 







FAZ REACH OUT AO MONGODB, AO CONTAINER,

PARA 

ARMAZENAR 

DATA/FETCHEAR DATA/MODIFICAR DATA,

E AÍ 



RETORNAR 1 RESPONSE DE VOLTA AO USER...









ESSA É NOSSA CURRENT ARCHITECTURE,
E O QUE ESTÁ SENDO ATUALMENTE EXECUTAOD...