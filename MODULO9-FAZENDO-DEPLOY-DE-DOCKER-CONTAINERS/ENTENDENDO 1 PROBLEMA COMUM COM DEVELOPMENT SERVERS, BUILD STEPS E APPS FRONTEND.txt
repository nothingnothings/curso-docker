


















ALGUNS APPS  OU PROJECTS 


REQUEREM



1 

'BUILD STEP' --> ISSO SIMPLESMENTE SIGNIFICA QUE 


RODAMOS 

CERTO 

CÓDIGO


EM DEVELOPMENT 




__ QUE NÃO SERÁ _ O CÓDIGO 


QUE SERÁ EXECUTADO MAIS TARDE... -> MTAS VEZES ISSO ACONTECE 




COM FRONTEND APPS ...  ------> TIPICAMENTE ESSE É O CASO QUANDO 

BUILDAMOS 

WEB APPS 
QUE 

RODAM NO BROWSER... 










-> O CÓDIGO DE BUILD GERALMENTE É OPTIMIZADO E TRANSFORMADO...













WEB APPS QUE RODAM NO BROWSER --> EXEMPLO, NOSSO REACT APP...
















NO REACT APP,

TEMOS DIFERENÇAS 

ENTRE 




O DEVELOPMENT E O PRODUCTION SETUP.... -> NÃO SÃO IGUAIS.. --> E NÃO SEREMOS CAPAZES 



DE CONSERTAR ISSO APENAS COM O DOCKER,



PQ 

ISSO É INERENTE A ESSE TIPO DE PROJECT...



















--> AGORA VEREMOS 1 EXEMPLO...










NOSSO FRONTEND APP É UM REACT APP.... -> OUTROS 

POPULAR FRAMEWORKS SÃO ANGULAR E VUE...














-> O QUE TODOS ELES TÊM EM COMUM... --> É QUE __ NÓS OS USAMOS PARA CONSTRUIR WEBSITES 


EM QUE 

A MAIOR PARTE DO TRABALHO É FEITA __ NO PRÓPRIO BROWSER,

COM 


BROWSER-SIDE JAVASCRIPT...




---> e, para buildar esses frontend 

WEB APPS,

TIPICAMENTE 

USAMOS 

SINTAXE QUE 

NÃO É SUPORTADA 

'OUT-OF-THE-BOX'



pelo browser...










--> O REACT TEM A SINTAXE JSX,


QUE É BASICAMENTE JAVASCRIPT MISTURADO COM HTML...
 E É CÓDIGO QUE 






 É __ TRANSFORMADO,


 COMPILADO,


 POR ALGUM SCRIPT, QUE RODA NO BACKGROUND,





DURANTE O DEVELOPMENT,



PARA _ CÓDIGO QUE __ É RODADO PELO BROWSER... -----> 











ISSO SIGNIFICA QUE 

O 


JSX É CÓDIGO  QUE ESCREVEMOS DURANTE O DEVELOPMENT,




ISSO 





PQ __ ELE _ VAI SER TRANSFORMADO, NO FUTURO... -_> A TRANSFORMAÇÃO PARA 


O CÓDIGO 





DE BUILD ACONTECE QUANDO RODAMOS 'NPM RUN BUILD',








SÓ NESSE MOMENTO TEMOS O CÓDIGO PRODUCTION-READY, OS ARQUIVOS PRODUCTION-READY,



QUE AGORA VAMOS QUERER COLOCAR EM 1 CONTAINER 


E 

RODAR ESSE CONTAINER, EM PRODUCTION...
















--> O SCRIPT DE 'START'



RODA 1 DEV SERVER COM NOSSO CÓDIGO...



 











-- O SCRIPT DE 'NPM START' --> STARTA 1 DEV SERVER... É 1 BASIC WEB SERVER QUE VAI SERVIR 

ESSE 


FRONTEND APP...











-> PQ ESSE NOSSO FRONTEND APP É APENAS ISSO,





É 1 WEB APP QUE __ É 'MEANT TO BE'

EXECUTADO NO BROWSER...










--> PARA ALCANÇAR O BROWSER,


ELE PRECISA SER SERVIDO POR UM SERVER...













-->  E AQUELA PASTA DE 'FRONTEND' 


NÃO TEM NENHUM SERVERSIDE CODE.... --> ISSO QUER DIZER QUE, ATUALMENTE,
ESTAMOS 

'BRINGING UP OUR OWN DEVELOPMENT SERVER',








QUE, NO FINAL DAS CONTAS,

ESTÁ 

APENAS 
FAZENDO 

SERVE DAQUELE ARQUIVO DE 'index.html' NA PASTA 


DE 

'public',

QUE NO FINAL DAS CONTAS SIMPLESMENTE 

IMPORTA 


O CÓDIGO JAVASCRIPT NECESSÁRIO PARA RODAR NOSSO APP...














--> É ASSIM QUE NOSSO PROJETO FUNCIONA.. E É ASSIM QUE TODOS 

OS APPS FRONTEND FUNCIONAM.... -> PORTANTO,
EM APPS COMO ESSES,



NÃO PODEMOS 



SIMPLESMENTE 'TAKE' 


ESSE DEV CONTAINER E O TRANSPORTAR PARA PRODUCTION... -------> ISSO PQ 


ESSE DEV CONTAINER,



QUE É STARTADO PELO NPM START,


NÃO É 'MEANT TO BE'

STARTADO EM PRODUCTION.... -----------> SIGNIFICA QUE TODO ESSE PROCESSO 


DE FILE COMPILATION 





__ USARIA __ MUITOS RESOURCES EM PRODUCTION, E SERIA MT SLOW... --> REALMENTE,


ELE SÓ PRESTA/DEVE SER USADO EM 

DEVELOPMENT...
















--> CERTO.... E PARA PRODUCTION,



TODOS OS FRAMEWORKS JAVASCRIPT PROVIDENCIAM 1 SCRIPT COMMAND DE 'BUILD',


EM VEZ DE 'START'...











O 'BUILD' NÃO VAI STARTAR SERVIDOR NENHUM,




MAS __ VAI  FAZER ESSA ETAPA 


DE 'CODE OPTIMIZATION AND COMPILATION' ,



E AÍ 
VAI 


SPITTAR 


ESSES 


ARQUIVOS OPTIMIZADOS E COMPILADOS,


PARA QUE 



PÓSSAMOS FAZER SERVE DESSES ARQUIVOS POR CONTA PRÓPRIA... COM ISSO FICAMOS COM 


AS FILES,

MAS NÃO COM O SERVER...

















--> ESSE É O PROBLEMA QUE ENFRENTAMOS, AQUI:




1) SCRIPT 'npm start' --> NOS DÁ O WEB SERVER, MAS ELE NÃO É NADA OPTIMIZADO..








2) SCRIPT 'npm run build' --> nos dá OS ARQUIVOS OPTIMIZADOS, MAS NÃO NOS DÁ O WEB SERVER...
















-> OK... ISSO QUER DIZER QUE APENAS RODAR 'npm run build'

EM 


1 

DOCKERFILE, COMO COMANDO FINAL,


__ NÃO É O SUFICIENTE,
PQ 

ISSO 



VAI __ APENAS GENERATE 1 PUNHADO DE FILES,

MAS 
NÃO 

VAI 



STARTAR NENHUM PROCESS QUE SERIA REACHABLE POR HTTP REQUESTS...













--> É POR ISSO QUE VAMOS TER DE ENCONTRAR 1 MANEIRA 



DE CONSTRUIR 1 DOCKERFILE QUE 

SIRVA PARA 'BUILD A CONTAINER QUE _ RODE NOSSO APP EM PRODUCTION'...