










AO LONGO DAS ÚLTIMAS AULAS,

O PROFESSOR NOS MOSTROU COMO PODEMOS DEPLOYAR 1 DOCKERIZED APP 

EM 1 AWS EC2 INSTANCE,

E COMO PODEMOS, PORTANTO,



RODAR 



NOSSO APP __ EM 1 CONTAINER,

EM 1 REMOTE HOST...













--> FAZEMOS ISSO SEM __ INSTALAR NENHUM RUNTIME, NENHUM ENVIRONMENT SOFTWARE, NO HOST...










-> APENAS O DOCKER PRECISA FICAR INSTALADO, NO HOST... -> É POR ISSO QUE É AWESOME...






--> O UPLOAD DO 'CODE' É MT FÁCIL --> PQ 



BASTA FAZER 'PULL'


DA LATEST IMAGE...











--> E, PORTANTO, FICAMOS COM O MESMO APP E ENVIRONMENT 

NA LOCAL MACHINE COMO NA REMOTE MACHINE... PQ, NO FINAL DAS CONTAS,




TODO O CÓDIGO E LÓGICA FICA NO CONTAINER...






É POR ISSO QUE O DOCKER É LEGAL...









MAS ESSA MANEIRA ESPECÍFICA DE FAZER DEPLOY DE 1 DOCKER APP 



__ TRAZ CERTAS DESVANTAGENS...











O PROFESSOR CHAMA ISSO DE 'DO IT YOURSELF APPROACH',


PQ TIVEMOS DE:







1) CRIAR A INSTANCIA MANUALMENTE 


2) CONFIGURAR A INSTANCIA MANUALMENTE 


3) CONECTAR A INSTANCIA MANUALMENTE 


4) INSTALAR O DOCKER MANUALMENTE...













--> ESSENCIALMENTE, TIVEMOS DE SEGUIR 1 MONTE DE ETAPAS


POR CONTA PRÓPRIA.... --> AINDA QUE O RUN DO APP EM SI 



TENHA SIDO RELATIVAMENTE FÁCIL, NO FINAL DAS CONTAS...














--> MAS A 'MAIN THING' 


do approach que o professor mostrou agora,






de esse approach 




em que __ 'USAMOS NOSSO PRÓPRIO REMOTE SERVER',


server que começamos com A AJUDA DE UM CLOUD HOSTING PROVIDER,




COMO ESSA EC2,




A MAIN THING 

QUE 

VC 

TEM QUE 

TER EM MENTE É QUE 




'''YOU FULLY OWN THIS REMOTE MACHINE''' -> E, COMO 





TEMOS ESSA MÁQUINA EM SI,




SOMOS TOTALMENTE RESPONSÁVEIS POR ELA,

E PELA SEGURANÇA DELA... --> VC FICA RESPONSÁVEL PELA CONFIGURATION 


DA REMOTE MACHINE... -> 











1) CONFIGURATION 



2) TEM QUE VER SE É FORTE O SUFICIENTE (se vc recebe mais tráfego, precisa deixá-la mais forte)..






3) PRECISA GARANTIR QUE TODOS 'KEY SOFTWARE' FIQUEM UPDATED... 


--> AINDA QUE VC NÃO TENHA QUE INSTALAR 'APP-SPECIFIC SOFTWARE',


VC AINDA TERÁ DE MANTER O OPERATING SYSTEM DA MÁQUINA 

UP-TO-DATE...




--> VC TEM FULL RESPONSIBILITY PARA ISSO...








4) TAMBÉM TEM QUE MANAGEAR 'NETWORK E SECURITY GROUPS'...







5) TEM QUE MANAGEAR O FIREWALL...















-> E, SE VC NÃO SABE OQ FAZER, AQUI,

VC PODERIA FACILMENTE SETTAR 1 EC2 INSTANCE 

INSEGURA,


UM HOST INSEGURO,

QUE PODERIA SER 'HACKED OR ABUSED'... --> ADICIONALMENTE,


ALÉM DISSO,





DESSA GRANDE DESVANTAGEM (

    PQ VOCÊ TEM QUE APRENDER SOBRE COISAS QUE VC NÃO SABE NATIVAMENTE,

    COMO WEB DEVELOPER...
),
 



 VOCÊ 


 TEM A GRANDE DESVANTAGEM 



 DE FAZER 

 O 


 'SSH ATÉ SUA MÁQUINA' -> 















 SSH ATÉ A MÁQUINA REMOTA --> ISSO FUNCIONA, SIM,




 E NÃO É HORRÍVEL,


 MAS AINDA É __ ANNOYING...
















 TALVEZ VC QUEIRA 1 DEPLOYMENT WORKFLOW EM QUE VC 

 NÃO TENHA QUE FAZER ISSO,


 EM QUE 



 VC TALVEZ RODE 1 COMANDO NA SUA 'LOCAL HOST MACHINE',


 1 PUNHADO DE COMANDOS,

 E AÍ 


 SUA IMAGE SEJA 

 AUTOMATICAMENTE 







 'MOVED'


 A UM REMOTE HOST... --> E TALVEZ ESSE REMOTE HOST 



 TAMBÉM 



 DEVA SER 'MANAGED',

 PARA QUE 





 TODAS AS COISAS NÃO TENHAM DE SER FEITAS MANUALMENTE (

    system software fica updatado automaticamente,

    coisas se updatam automaticamente, etc...
 )


















 --> OK... TALVEZ VC QUEIRA ESSE APPROACH MAIS 'MANAGED'.... -> E O PROFESSOR 


 REALMENTE RECOMENDA ESSE APPROACH MAIS MANAGED -> PQ ISSO TE DEIXA MAIS 

 TEMPO 

 PARA 

 PENSAR SOBRE O SEU SOURCE CODE E SEU DOCKERIZED APP,



 SEM 

 TER 

 DE 

 FOCAR 



EM 



''MANAGING SERVERS'',


'FIREWALLS'


E 

'NETWORKS' .. ----> ISSO EXIGE 1 CONJUNTO DE SKILLS 

TOTALMENTE 


DIFERENTE,





E VOCê, COMO SOFTWARE DEVELOPER,

TALVEZ NÃO TENHA ESSE SET DE SKILLS...












--> É POR ISSO QUE ESSE _ EXEMPLO DE 'EC2'

INICIAL FOI UM BOM EXEMPLO INICIAL,



PQ O PROFESSOR NOS MOSTROU QUE PODERÍAMOS, TEORICAMENTE,




'INSTALL ONLY DOCKER IN A REMOTE MACHINE',



E AÍ 

USAR 

SEU CONTAINER 

NESSA REMOTE MACHINE, EXATAMENTE COMO VC FEZ, LOCALMENTE... -> ENTRETANTO,


PARA APPS MAIORES,

APPS 

COM MÚLTIPLOS CONTAINERS,



ISSO TALVEZ NÃO SEJA IDEAL... -> A ___ NAÕ SER __ QUE VC SAIBA 

O QUE VC 

ESTÁ FAZENDO... -> SE VC SOUBER EXATAMENTE O QUE VC ESTÁ FAZENDO,



TER CONTROLE TOTAL SOBRE TUDO 


PODE 



SER UMA VANTAGEM.... MAS NA MAIOR PARTE DOS CASOS, NÃO SERÁ...















--> É POR ISSO QUE NO RESTO DO MÓDULO VEREMOS 


SERVICES QUE NÃO SÃO O EC2,

SERVICES 



QUE PODERÍAMOS USAR, QUE SÃO 'MANAGED',

E QUE 

NÃO 


NOS ENCARREGAM DE CHECAR/GERENCIAR TODOS OS ASPECTOS DE 1 'MÁQUINA'...