






CONTAINERS SÃO SEMPRE ÓTIMOS!

















--> BEM, NÓS JÁ APRENDEMOS E 


VIMOS QUE 

CONTAINERS 

SÃO ÓTIMOS,









E QUE PODEM FACILITAR NOSSO DEVELOPMENT...












ATÉ AGORA,

SEMPRE FOCAMOS NO DEVELOPMENT...













MAS O QUE INTERESSA É QUE CONTAINERS SÃO 'ISOLATED PACKAGES' CHEIAS 




DE APPLICATION CODE E APPLICATION ENVIRONMENT, 




QUE PODEMOS 


'SHIP EVERYWHERE' 

NOS 


LUGARES EM QUE O DOCKER É RODADO...  ---> ISSO PQ OS CONTAINERS SÃO 'STANDARDIZED',





SE CONSTRUÍDOS COM  O DOCKER,

O QUE QUER DIZER QUE PODEM SER RODADOS EM QUALQUER LUGAR EM QUE O 

DOCKER ESTÁ INSTALADO...

















--> CERTO... PORTANTO,




NA SECTION 1 DESSE CURSO,


O PROFESSOR JÁ MENCIONOU QUE CONTAINERS PODEM NOS AJUDAR COM PROBLEMAS 




QUE 




TALVEZ ENFRENTEMOS QUANDO SHIPPAMOS 



APPLICATIONS ... --> PQ, SEM CONTAINERS,



FREQUENTEMENTE 

ACABAMOS COM 


DEVELOPMENT E PRODUCTION ENVIRONMENTS DIFERENTES..













ISSO SIGNIFICA QUE, SEM O DOCKER,

É COMUM 

TER 


CÓDIGO QUE 'FUNCIONA DE FORMA LOCAL',




MAS QUE 'NÃO FUNCIONA NA VERSÃO DEPLOYADA' --> ISSO É BEM COMUM...















---> E O PROFESSOR JÁ MENCIONOU, NA PRIMEIRA SECTION,



QUE O DOCKER E CONTAINERS 


PODEM 

NOS AJUDAR COM ISSO...











PODEMOS CONSEGUIR O MESMO EXATO 

ENVIRONMENT NA NOSSA DEVELOPMENT MACHINE E __ NA NOSSA REMOTE MACHINE,

EM QUE 

QUEREMOS RODAR A APPLICATION --> E ESSE É O CASO JUSTAMENTE 

PQ __ 

O ENVIRONMENT 



ESTARÁ __ DENTRO _ DO CONTAINER (

    não temos que configurar a máquina em si,

    NÃO PRECISAMOS INSTALAR 

    FERRAMENTAS COMO 'NODEJS'


    NA MÁQUINA,




    NEM NO 'LOCAL DEVELOPMENT MACHINE',



    NEM 


    NO PRODUCTION REMOTE HOSTING MACHINE...

)








EM VEZ DISSO,

TEMOS TUDO DE QUE PRECISAMOS __ DENTRO __ DO CONTAINER...
















PORTANTO,

COM CONTAINERS E O DOCKER,


NOS BENEFICIAMOS DESSE 'STANDALONE', 'ISOLATED' ENVIRONMENT,




TANTO 





NO DEVELOPMENT,


COMO 
TAMBÉM 



NO PRODUCTION...













--> É JUSTAMENTE POR ISSO QUE O PROFESSOR TINHA TANTAS SECTIONS 
SOBRE  


O 'LOCAL DEVELOPMENT ENVIRONMENT',

PQ 






TUDO _QUE APRENDEMOS LÁ SERÁ USADO TAMBÉM NO PRODUCTION ENVIRONMENT...












--> ISSO PQ VC VAI SHIPPAR OS MESMOS CONTAINERS COM QUE VC TRABALHOU, NA SUA LOCAL HOST MACHINE,



NAS __ MÁQUINAS REMOTAS HOSTEADORAS..













---->  E É EXATAMENTE ISSO QUE VEREMOS, NESTE MÓDULO...














COM OS CONTAINERS E O DOCKER,






TEMOS ESSES 'REPRODUCIBLE ENVIRONMENTS',

QUE 

SÃO 
FÁCEIS




DE USAR E COMPARTILHAR,


E QUE NOS AJUDARÃO 




A TRANSPORTAR 


NOSSO APP, LOCAL,




A UMA REMOTE MACHINE,






EM QUE 

SERÁ 


'SERVED TO ALL OUR APPLICATION USERS'..




















COM ISSO,

COM O DOCKER,


GARANTIMOS QUE 



NENHUMA 

'UNWANTED SURPRISE'

OCORRERÁ.... --> O QUE FUNCIONA NA NOSSA MÁQUINA,


EM 1 CONTAINER,









VAI __ TAMBÉM FUNCIONAR, DEPOIS DO DEPLOYMENT,


EM UMA REMOTE MACHINE...












ESSA É A IDEIA POR TRÁS DO DOCKER...













--> APRENDEMOS OS BASICS DO DOCKER,

E AGORA OS UTILIZAREMOS, QUANDO FIZERMOS DEPLOY DE NOSSO APP...










--> VAMOS MOVER NOSSOS CONTAINERS,

DE 

1 



LOCAL HOST MACHINE,

A 

1 


REMOTE HOST MACHINE..













--> NESSE MÓDULO,

VEREMOS O DEPLOY DE CONTAINERS...







--> ISSO SIGNIFICA 'BRING THE CONTAINERS TO REMOTE MACHINES'...












HÁ 1 PUNHADO DE COISAS QUE VC DEVE FICAR 'AWARE OF',

quanto 


AO DEPLOY DE CONTAINERS...














AS COISAS QUE VC DEVE 'WATCH OUT FOR':













1) UMA DAS COISAS MAIS IMPORTANTES,

QUE PODE SER ESTRANHA QUANDO VC VÊ PELA PRIMEIRA VEZ,

É QUE 




''''EM DEVELOPMENT, USAMOS BIND MOUNTS UM MONTE'''....


''''EM PRODUCTION, NÃO DEVEMOS USAR BIND MOUNTS...''''










2) A OUTRA COISA É QUE 

'''SEUS CONTAINERIZED APPS TALVEZ PRECISEM DE DIFERENTES SETUPS,
1 PARA DEVELOPMENT,
1 PARA PRODUCTION'''' --> isso pode soar estranho,


pq 


a ideia por trás dos containers era ter 'ONE AND THE SAME ENVIRONMENT',





MAS 



A QUESTÃO 

É QUE 


CERTOS APPS,

COMO REACT APPS,



SIMPLESMENTE PRECISAM DE 1 'BUILD STEP',




1 STEP EM QUE O CÓDIGO É CONVERTIDO E OPTIMIZADO.... E ESSA BUILD 

STEP 
OCORRE DEPOIS DO DEVELOPMENT,




_ ANTES__ DE VC __ DEPLOYAR O APP....















--> MAS APESAR DE SER NECESSÁRIO ESSE 'BUILD STEP',


NESSE MÓDULO VEREMOS COMO 


PODEMOS 

AINDA ASSIM 




SHIPPAR CONTAINERS COM 'REPRODUCIBLE ENVIRONMENTS',


E EM QUE O CÓDIGO _ QUE _ FUNCIONOU LOCALMENTE 

TAMBÉM VAI FUNCIONAR QUANDO FOR DEPLOYADO...

















--> O MESMO SE APLICA AOS BIND-MOUNTS:






AINDA QUE _ SERÃO USADOS DURANTE DEVELOPMENT, E NÃO DURANTE PRODUCTION,


VEREMOS QUE 

 ESSA NOÇÃO __ NÃO VAI 'CONTRADICT'

 A IDEIA 

 POR TRÁS DOS CONTAINERS,



 E COMO 

 ISSO 


 NÃO VAI LEVAR à EXISTÊNCIA 

 DE CONTAINERS 



 'DIFERENTES PRODUCTION VS DEVELOPMENT' -->  VEREMOS COMO TUDO ISSO VAI FUNCIONAR,

 AINDA 

 QUE 

 TENHAMOS 

 DIFERENÇAS...












ADICIONALMENTE, OUTRA COISA QUE VEREMOS AO LONGO DESTE MÓDULO 







TEM RELAÇÃO COM 'MULTI-CONTAINER PROJECTS'... -> EM PROJETOS COMO ESSES,





DEPENDE PESADAMENTE 

DO PROJETO E DOS CONTAINERS,


A IDEIA 



DE 



'''PRECISO SPLITTAR/QUERO SPLITTAR SEUS CONTAINERS 

AO LONGO DE MÚLTIPLOS HOSTS (múltiplas remote machines)''' --> ISSO QUER DIZER QUE,



EMBORA 

VC TALVEZ QUEIRA TESTAR TUDO LOCALMENTE,


COM 'docker-compose',

LOCALMENTE EM 1 HOST MACHINE,









PARA O DEPLOYMENT,

TALVEZ VC QUEIRA 

SPLITTAR 


SEU 



APP __ AO LONGO DE MÚLTIPLOS HOST MACHINES... -> veremos isso ao longo deste módulo..


















POR FIM, NESSE MÓDULO VEREMOS ALGUMAS LIÇÕES EM QUE 


TEREMOS 1 'TRADE-OFF'... -->   OU SEJA,





ALGUMAS VEZES 

OPTAREMOS POR SOLUÇÕES EM QUE 


TEREMOS 


'''LESS CONTROL''' sobre o DEPLOYMENT PLATFORM (como, por exemplo, 1 remote host),




MAS QUE, EM CONTRAPARTIDA,

TEREMOS 

'LESS RESPONSIBILITY' 

(
    E ISSO PODE SER WORTH IT,COMO VEREMOS AO LONGO DESTE MÓDULO...
)














ISSO PQ,

SE VC TEM QUE FAZER MANAGE DE 1 REMOTE HOST POR CONTA PRÓPRIA,



SE VC TEM QUE SETUPPAR TUDO EM 1 REMOTE HOST MACHINE,



ISSO TAMBÉM VAI TRAZER 1 MONTE DE RESPONSABILIDADE A VOCÊ,



EM QUE 
VC 

VAI TER QUE GARANTIR QUE ESSA MÁQUINA É SEGURA E ASSIM POR DIANTE...
















--> É POR ISSO QUE O PROFESSOR TERÁ ALGUMAS LIÇÕES EM QUE 

VEREMOS 

1 'LESS-CONTROLLED',

mas 

também 

'less-responsibility' solution,


PARA QUE 


NÓS, DESENVOLVEDORES,

TENHAMOS 'A EASIER TIME'...