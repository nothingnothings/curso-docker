

















--> OK.. MAS O QUE É TÃO ESPECIAL SOBRE O LARAVEL E O PHP?













-> BEM, ESSE CURSO É SOBRE O DOCKER,






MAS TODOS OS EXEMPLOS ATÉ AGORA FORAM PRATICAMENTE SOBRE O NODE, REACT E MONGO...












--> MAS O PROFESSOR QUER ENFATIZAR QUE PODEMOS USAR O DOCKER COM QUALQUER TIPO 

DE TECNOLOGIA...











--> E O LARAVEL É O FRAMEWORK PHP MAIS FAMOSO..












--> MAS SETTAR 1 LARAVEL DEV SETUP 

PODE SER 

BEM CHATO... -> E ISSO NÃO É CULPA 



DO LARAVEL,

E SIM 


DO 

'SETUP PHP'...









--> SE LEMOS OS DOCS DO LARAVEL,

TEMOS TODOS OS SYSTEM  REQUIREMENTS.... -----> PRECISAMOS DE BASTANTES COISAS:








1) PRECISAMOS INSTALAR O PHP...






E ISSO _ JÁ É UM PROBLEMA ... -> INSTALAR O PHP 'JUST LIKE THAT' É ALGO QUE VC PODE FAZER, SIM,




MAS __ O PHP,

AO CONTRÁRIO DO NODEJS,




__'NÃO É O BASTANTE'...











A COISA ÓTIMA DO 


NODEJS,
 NO CASO,


 É QUE 


 ___ ELA NÃO É APENAS A LANGUAGE EM QUE ESCREVEMOS NOSSO CÓDIGO (pq é javascript),




 MAS TAMBÉM _USAMOS O NODEJS PARA __ CONSTRUIR O SERVER, QUE HANDLA 


 OS INCOMING REQUESTS... -------> ISSO SIGNIFICA QUE 










 '''TEMOS O APPLICATION CODE E A SERVER LOGIC __ TUDO EM 1 ÚNICO LUGAR,

 TUDO COM NODEJS''' --> ISSO QUER DIZER QUE,


 QUANDO CONSTRUÍMOS APPS NODEJS,



BASTA BAIXAR E INSTALAR O NODEJS 

PARA 



'GET STARTED' ... e isso é super fácil de fazer...















-> MAS COM O PHP,

AS COISAS SÃO DIFERENTES... -> APENAS INSTALAR O PHP NÃO É O SUFICIENTE,




PQ _ PRECISAMOS __ DE 1 SERVER JUNTO DO PHP... -> PRECISAMOS DE 1 SERVER QUE HANDLE 

INCOMING REQUESTS,




QUE, POR SUA VEZ,


VAI TRIGGAR O INTERPRETADOR PHP (interpreter PHP),




QUE SÓ ENTÃO __ VAI __ RODAR __ NOSSO PHP CODE PARA ESSES INCOMING REQUESTS....











--> E SETTAR TUDO ISSO 


NA SUA LOCAL MACHINE,


COMBINADO 

COM 



MONGODB E MYSQL DATABASES,

ISSO 


PODE SER BEM ANNOYING..











--> É POR ISSO QUE ESSE É UM ÓTIMO EXEMPLO PARA O USO DO DOCKER,


PQ VEREMOS COMO É BEM MAIS SIMPLES DE USAR O DOCKER PARA SETTAR O PROJETO...











-----> COM O DOCKER, SEM INSTALAR QUALQUER COISA NA NOSSA LOCAL MACHINE,


SEREMOS CAPAZES DE ESCREVER LARAVEL PHP CODE E ESCREVER LARAVEL PHP APPS...













--> NOSSO TARGET SETUP SERÁ ESTE (tudo SEM INSTALAR NADA NA NOSSA LOCAL HOST MACHINE, APENAS O DOCKER)...






TARGET SETUP:











1) TEREMOS 1 SOURCE CODE FOLDER (não será 1 container, no caso
), NA NOSSA LOCAL HOST MACHINE... VAI CONTER O CÓDIGO-FONTE 

DESSE LARAVEL PHP APP...




ESSE SERÁ O FOLDER QUE VAMOS PODER ABRIR NA NOSSA LOCAL MACHINE,

EM QUE 
VAMOS 
PODER ESCREVER CÓDIGO LARAVEL...









--> ESSE SOURCE-CODE FOLDER, POR SUA VEZ,

VAI ENTÃO SER EXPOSTO A 1 CONTAINER,

O CONTAINER 


DE 'PHP INTERPRETER'...








2) PHP INTERPRETER CONTAINER -----> ESSE SERÁ 1 CONTAINER 

QUE VAI TER O PHP INSTALADO _ _DENTRO DELE... -----> E ESSE CONTAINER 
TERÁ 

ACESSO 
AO NOSSO SOURCE CODE,

PARA QUE POSSA 

INTERPRETAR ESSE SOURCE-CODE 

E _ GERAR_ 1 RESPONSE PARA INCOMING REQUESTS...




-------> 'GENERATE A RESPONSE FOR INCOMING REQUESTS' --> E ESSA É A PRÓXIMA ETAPA,


O PRÓXIMO BUILDING BLOCK... 





ISSO PQ __ ALÉM DESSE INTERPRETER PHP,
NECESSÁRIO PARA RODAR NOSSO CÓDIGO/LÓGICA,


PRECISAMOS ___ TAMBÉM DE 1 EXTRA SERVER (
    PQ, AO CONTRÁRIO DO NODE, ESSE 

    SERVER NÃO É CONSTRUÍDO 'AUTOMATICAMENTE' PELO PHP...
)








-> É POR ISSO QUE TEREMOS MAIS 1 CONTAINER, O SEGUNDO CONTAINER,

QUE 
VAI 


TER 

'NGINX' NO SEU INTERIOR... 







3) CONTAINER 'NGINX' -->  ESSE CONTAINER 'NGINX'


VAI BASICAMENTE 

'TAKE INCOMING REQUESTS', PARA ENTÃO MANDAR O CONTEÚDO DESSES REQUESTS 

AO 


'PHP INTERPRETER',


PARA QUE ENTÃO ESSE INTERPRETER 

'GENERATE A RESPONSE',



QUE 
ENTÃO 

SERÁ 

ENVIADA 

DE VOLTA AOS CLIENTS  





QUE ENVIARAM O REQUEST no início...










4) PARA ARMAZENAR A DATA, USAREMOS UMA DATABASE 'MYSQL',


QUE SERÁ O TERCEIRO CONTAINER (
    ÀS VEZES MONGODB DATABASES SÃO USADAS COM APPS LARAVEL,

    MAS É  BEM MAIS COMUM TRABALHAR COM SQL DATABASES...

)











--> OK... MAS É CLARO QUE NOSSO 'PHP INTERPRETER'


VAI PRECISAR SER CAPAZ DE SE COMUNICAR COM AQUELA DATABASE MYSQL...









------> NOSSO FRAMEWORK LARAVEL (que, no final das contas, é apenas 1 monte de código php) 

PRECISA SER CAPAZ DE SE COMUNICAR COM O MYSQL DATABASE..

















--> OK...3 CONTAINERS... 3 __ APP__ CONTAINErs...









1) NGINX WEB SERVER 



2) MYSQL DATABASE 




3) PHP INTERPRETER
















OK... SÃO APP CONTAINERS, E NÃO 'UTILITY CONTAINERS'...










--> ISSO QUER DIZER QUE ESSES CONTAINERS VÃO FICAR 'UP AND RUNNING'

ENQUANTO NOSSO APP ESTIVER UP AND RUNNING...










--> ISSO PQ _ ELES VÃO:






1) RECEBER INCOMING REQUESTS 



2) HANDLAR ESSES REQUESTS, COM O PHP E O LARAVEL 



3) VÃO ARMAZENAR E LER DATA A PARTIR DESSES REQUESTS, COM NOSSA DATABASE...



(DATA STORAGE, NA DATABASE)..










-> OK... MAS ALÉM __ DESSES CONTAINERS 'APP',

TAMBÉM 
VAMOS 

PRECISAR DE ALGUNS 
UTILITY 
CONTAINERS...














-> ISSO PQ, EM LARAVEL APPLICATIONS,


HÁ 3 TIPOS DE 'TOOLS' QUE NOS SERÃO NECESSÁRIAS...














O PRIMEIRO TIPO DE TOOL:





1) 'COMPOSER' --> O COMPOSER, PARA O 'PHP',

É 


A MESMA COISA QUE O 'npm' É PARA O _ NODE_...



O COMPOSER É 1 PACKAGE MANAGER,


QUE 

PODE SER USADO 

PARA 

INSTALAR THIRD PARTY PACKAGES,



E O UTILIZAREMOS PARA 





____ CRIAR ___ O APP LARAVEL..








--> O LARAVEL TAMBÉM UTILIZA O COMPOSER PARA __ INSTALAR AS DEPENDENCIES 


NECESSÁRIAS A ELE...












2) ALÉM DISSO, O LARAVEL VEM COM SUA PRÓPRIA TOOL,



QUE É O 'LARAVEL ARTISAN'... -->  É UMA TOOL/COMMAND QUE 

USAMOS 


PARA RODAR MIGRATIONS 

CONTRA NOSSA DATABASE,



E __ TAMBÉM ESCREVER 'INITIAL STARTING DATA'


NA NOSSA DATABASE...





TAMBÉM USAMOS O 'LARAVEL ARTISAN' PARA MAIS ALGUMAS COISAS...













-> NÃO SEI LARAVEL, MAS APRENDEREI...












-> POR FIM, 


USAREMOS: 



3) NPM --------> ISSO PQ O LARAVEL 

UTILIZA O NPM PARA UM POUCO DE SUA FRONTEND LOGIC --> NA PARTE DO RETURN 


DAS 

'VIEWS',


QUE SÃO RETORNADAS PELO LARAVEL,

VC PRECISA 




DO NPM E DO NODE ....















--> E COMO O PROFESSOR QUER FORNECER 1 SETUP COMPLETO 




PARA DESENVOLVER APPS LARAVEL,


VAMOS ADICIONAR 



TODOS ESSES CONTAINERS...














SÃO 6 CONTAINERS, NO TODO...





--> E ESSES CONTAINERS VÃO, EM CERTA MEDIDA,

TRABALHAR COM NOSSO SOURCE CODE...

















--> ESSE É O SETUP COM QUE TRABALHAREMOS,  NESSE MÓDULO...













1) NGINX WEB SERVER 



2) LARAVEL PHP INTERPRETER 



3) MYSQL DATABASE....






4) NPM UTILITY CONTAINER 



5) LARAVEL ARTISAN UTILITY CONTAINER 



6) COMPOSER (PHP) UTILITY CONTAINER...