
















-> PARA CONSTRUIR UMA 'CUSTOM IMAGE',.







PRECISAMOS IR ATÉ O FOLDER QUE CONTÉM NOSSO CÓDIGO,

E AÍ 

DEVEMOS 







__CRIAR__ 1 NOVA _ FILE...











--> SERÁ UMA FILE __ CHAMADA DE 'Dockerfile'...








--> COLOCAMOS ISSO NO MESMO NÍVEL DE 'server.js' 



e 'package.json'....
















--> PARA TER O MELHOR SUPORTE POSSÍVEL A ESSE TIPO DE ARQUIVO,
O
 PROFESSOR RECOMENDA A EXTENSION DE 'DOCKER'...










 ------> INSTALE A EXTENSION --> ELA TE AJUDA A ESCREVER CÓDIGO DOCKER E INSTRUCTIONS DOCKER...
















 ---> OK...






 TEMOS ESSA DOCKER FILE...








 O QUE COLOCAMOS NESSA FILE?











 ELA CONTERÁ AS INSTRUCTIONS PARA O DOCKER,
 QUE 

 QUEREMOS 


 EXECUTAR QUANDO BUILDAMOS NOSSA PRÓPRIA IMAGE...








 --> ELE CONTÉM OS SETUP INSTRUCTIONS PARA NOSSA PRÓPRIA IMAGE...











 -> TIPICAMENET,

 EM 1 DOCKER FILE,


 VOCÊ 

 COMEÇA 




 COM UMA INSTRUCTION DE 


 'FROM '...
















 FROM ------> TUDO EM CAPS...









 --> ISSO TE DEIXA ''''BUILD YOUR IMAGE'''' COM __ BASE__ EM OUTRA BASE IMAGE....









 -----> É ISSO QUE VOCÊ TIPICAMENTE FAZ...









 TEORICAMENTE, VOCÊ PODERIA
  




BUILDAR UMA DOCKER IMAGE DO NADA,


MAS VOCê 

SEMPRE 

VAI QUERER 





ALGUM 'OPERATING SYSTEM LAYER',


OU ALGUM 


OUTRO TIPO 




DE TOOL PEDIDA POR SEU CÓDIGO....















--> OK, FAZEMOS ISSO  COM 'FROM'...














FROM node 















---> BASTA colocar 





isso...








--> e essa image 




de ''''node'''',



ELA 


JÁ ESTARÁ VIVENDO NA NOSSA MÁQUINA,


ISSO 



__ PQ __ QUANDO _ RODAMOS 1 CONTAINER COM BASE EM 1 DOCKER IMAGE DO DOCKER HUB,

 




 ESSA IMAGE ACABA 'DOWNLOADED AND CACHED LOCALLY' --------> ISSO SIGNIFICA QUE 




 
 ESSA É, AGORA,


 UMA 


 'DOCKER HUB IMAGE __ AND __ LOCAL _ DOWNLOADED IMAGE'...


















 MAS A COISA MAIS IMPORTANTE É QUE 

 ESSE COMANDO SERÁ RECONHECIDO,



 E QUE O 'node'


 será um 





 NOME RECONHECIDO PELO DOCKER..
















 --> OK... AGORA QEUREMOS DIZER AO DOCKER: 






''HEY, DENTRO DE MINHA PRÓPRIA IMAGE,

QUERO COMEÇAR PELO __ PULL __ IN __ DESSA NODE IMAGE.... E DEPOIS QUERO CONTINUAR'''...











ESSA É A __PRIMEIRA ETAPA....














COMO PRÓXIMA ETAPA,

QUEREMOS DIZER 



'''QUAIS ARQUIVOS DE NOSSO __ SISTEMA DE ARQUIVOS LOCAL __ DEVEM IR PARA DENTRO DA IMAGE'''...
















--> PARA ISSO,

O PROFESSOR TEM O COMANDO DE 'COPY'...











COPY xxxxx









--> UM COMANDO MT SIMPLES QUE PODEMOS EXECUTAR É 



'COPY . .' 












o que significa isso?









ESSE É UM COMANDO MT POPULAR,

PQ FAZ 2 COISAS,

ESSENCIALMENTE:














VOCÊ DEFINE 2 'PATHS' --------> 






O PRIMEIRO PONTO -----> É O PATH ___ '''OUTSIDE''' DA IMAGE, EM QUE __ OS ARQUIVOS__ QUE DEVEM SER COPIADOS __ DENTRO DA IMAGE ESTÃO VIVENDO (ou seja, dizemos 'TUDO QUE ESTÁ AO REDOR DESSA DOCKER FILE')...







----> APENAS 1 PONTO COMO PRIMEIRO CAMINHO --> '''''É O MESMO FOLDER QUE CONTÉM A DOCKER FILE, EXCLUINDO A DOCKER FILE, QUE QUEREMOS QUE ENTRE DENTRO DA IMAGE'...









--> isso quer dizer que 

'package.json', 'server.js' e 'public'

DEVEM 


SER COPIADOS PARA DENTRO DA IMGE...

















--> O SEGUNDO PONTO -->   ''''É O CAMINHO DENTRO DA IMAGE, EM QUE ESSAS FILES DEVEM SER ARMAZENADAS''''.. (ou seja, aqui definimos a 'ROOT' como caminho)...













----> E __ TODA IMAGE, E TODO CONTAINER CRIADO COM BASE EM 1 IMAGE,



TEM SEU PRÓPRIO 'INTERNAL FILE SYSTEM',






QUE 



_´É TOTALMENTE 'DETACHED'



DO FILE SYSTEM 

DE SUA 

MÁQUINA LOCAL,






DE SEU PC...









--> OU SEJAA,



ESSE FILE SYSTEM FICARÁ 'HIDDEN AWAY',


DENTRO DO DOCKER CONTAINER... 













--> E ACTUALLY,


O PROFESSOR DIZ QUE 



__ NÃO É UMA BOA IDÉIA USAR O 'ROOT FOLDEr'/root entry DO SEU 

DOCKER CONTAINER 






como segundo parâmetro,


 
 E SIM ALGUM __ SUBFOLDER...











 --> PODEMOS COLOCAR QUALQUER NOME NESSE SUBFOLDER,


 MAS O PROFESSOR GOSTA DE COLOCAR '/app'....








 EX:








FROM node 





COPY . /app















EX:










# ESCOLHEMOS A 'BASE IMAGE', lá do docker hub, que DEVE SER USADA COMO BASE PARA ESSA NOSSA CUSTOM IMAGE (que é o Dockerfile INTEIRO)...
FROM node



# AQUI DEFINIMOS, COM 2 PARÂMETROS (''2 pontos'', às vezes), ''''O CAMINHO DAS FILES QUE SERÃO COPIADAS PARA DENTRO DA IMAGE/CONTAINER''''  E ''O CAMINHO EM QUE VIVERÃO ESSES ARQUIVOS, DENTRO DO DOCKER CONTAINER/IMAGE''

#  um 'ponto' no primeiro parâmetro significa que PEGAMOS TODOS OS ARQUIVOS AO REDOR DA NOSSA DOCKER FILE... e 1 'ponto' no segundo parâmetro significa que queremos que OS ARQUIVOS VIVAM NO ROOT do docker container/image...
COPY . /app





















----> OK...







FAREMOS COM QUE TODOS OS ARQUIVOS 


SEJAM COLOCADOS DENTRO DESSE FOLDER DE '/app',






NA IMAGE/CONTAINER..











--> ESSA FOI A SEGUNDA ETAPA...













--> COMO TERCEIRA ETAPA,

PRECISAMOS RODAR 'npm install',

PQ 


ISSO 

É ALGO QUE 

TIVEMOS 

DE FAZER NO LADO DE FORA DO APP, NA NOSSA MÁQUINA --> PRECISAMOS INSTALAR AS DEPENDENCIES 


DE NOSSO PROJETO NODE...

















--> PARA ISSO,

PRECISAMOS RODAR O COMANDO DE 'run'...
















RUN npm install   ...
















OK, MAS AQUI TEMOS UM __ GOTCHA ------> POR DEFAULT,


TODOS 


ESSES COMANDOS 




SERÃO 


EXECUTADOS 


NO 'WORKING DIRECTORY' DE SEU CONTAINER E IMAGE....
















''''WORKING DIRECTORY''' -------> E, POR DEFAULT,



ESSE 'WORKING DIRECTORY'


É O __ ROOT FOLDER__ 




__ DO SEU CONTAINER FILE SYSTEM -------> E COMO ESTAMOS 

COPIANDO 

NOSSO CÓDIGO 


PARA 


DENTRO 



DO FOLDER DE 'app',






PRECISAMOS QUE ESSE COMANDO DE 'RUN npm install' 



SEJA 



___eXECUTADO_ DENTRO DESSE FOLDER DE 'app'...













-----> E 1 FORMA CONVENIENTE DE DIZER QUE 











'''TODOS OS COMANDOS DEVEM SER EXECUTADOS NESSE FOLDER ESPECÍFICO'''





É __ UM COMANDO QUE 


FAZ EXATAMENTE ISSO,




1 INSTRUCTION,









E É UMA __ INSTRUCTION _ QUE DEVE SER COLOCADA___ ANTES_ DE VOCÊ COPIAR TODAS AS COISAS...















--> É O COMANDO DE 'WORKDIR' ------> É USADO PARA SETTAR O 'WORKING DIRECTORY DO DOCKER CONTAINER'...














E VAMOS DEFINIR O 'WORKING DIRECTORY'

COMO SENDO 

'/app'..








ex:





# ESCOLHEMOS A 'BASE IMAGE', lá do docker hub, que DEVE SER USADA COMO BASE PARA ESSA NOSSA CUSTOM IMAGE (que é o Dockerfile INTEIRO)...
FROM node




# POR DEFAULT, O DOCKER VAI RODAR OS COMANDOS NO 'ROOT' DE SEU PROJETO (e isso não será '/app', o que é um problema) ---> para DEFINIR QUE ESSES COMANDOS SEJAM RODADOS EM ALGUMA OUTRA PASTA QUE NÃO O ROOT, VOCÊ PRECISA DO COMANDO 'WORKDIR'
WORKDIR /app




# AQUI DEFINIMOS, COM 2 PARÂMETROS (''2 pontos'', às vezes), ''''O CAMINHO DAS FILES QUE SERÃO COPIADAS PARA DENTRO DA IMAGE/CONTAINER''''  E ''O CAMINHO EM QUE VIVERÃO ESSES ARQUIVOS, DENTRO DO DOCKER CONTAINER/IMAGE''

#  um 'ponto' no primeiro parâmetro significa que PEGAMOS TODOS OS ARQUIVOS AO REDOR DA NOSSA DOCKER FILE... e 1 'ponto' no segundo parâmetro significa que queremos que OS ARQUIVOS VIVAM NO ROOT do docker container/image...
COPY . /app


# RUN roda quaisquer comandos (aqui, precisamos de npm install) --> POR DEFAULT, O DOCKER VAI RODAR OS COMANDOS NO 'ROOT' DE SEU PROJETO (e isso não será '/app', o que é um problema) ---> para DEFINIR QUE ESSES COMANDOS SEJAM RODADOS EM ALGUMA OUTRA PASTA QUE NÃO O ROOT, VOCÊ PRECISA DO COMANDO 'WORKDIR'
RUN npm install





















WORKDIR /app 









--> TODOS OS SUBSEQUENTES COMANDOS SERÃO EXECUTADOS DE DENTRO DESSE FOLDER...










ISSO FAZ SENTIDO,
PQ 
É AÍ 

QUE 
TEREMOS TODO NOSSO CÓDIGO,
MAIS TARDE...















COMO SIDENOTE,



DADO O FATO DE QUE 


_ AGORA NÓS REALMENTE JÁ 

SETTAMOS 


O 


WORKDIR COMO '/app',









PODERÍAMOS TAMBÉM 


TROCAR 



O COMANDO DE 



'COPY . /app' 







PARA 







'COPY . ./' ,










pq isso VAI, TAMBÉM,

SIGNIFICAR 










'''COPIE _ TUDO __ AO REDOR DA DOCKER FILE _ _PARA _ DENTRO __ DO _ 



WORKING DIRECTORY, DENTRO DO NOSSO DOCKER CONTAINER'''...











--> ISSO PQ _ COMOO _ AGORA TROCAMOS O WORKING DIRECTORY PARA '/app',





NÃO APENAS 'RUN',

MAS TAMBÉM  
'COPY'




SERÁ EXECUTADO __ RELATIVAMENTE A ESSE WORKING DIRECTORY DE 'app'..









-->

É POR ISSO QUE, AGORA,


ESSE COMANDO DE './',



NO CONTEXTO DO CONTAINER-INTERNAL FILE SYSTEM,









ESSE RELATIVE PATH VAI APONTAR AO '/app'...










--------> MAS É CLARO QUE PODEMOS SER MAIS EXPLÍCITOS 



E DEFINIR 


O __ CAMINHO ABSOLUTAMENTE,

COM 


'/app'...












--> E O PROFESSOR PREFERE ASSIM,
PQ DEIXA BEM CLARO 

''O LOCAL EM QUE VAMOS COPIAR NOSSOS ARQUIVOS'...














--> OK... TORNAR AS COISAS EXPLÍCITAS SEMPRE NOS AJUDA..







--> É FÁCIL VER QUAL É O WORKDIR, NESSE EXEMPLO,


MAS 



SE O DOCKERFILE FOSSE MAIS COMPLEXO,

SERIA RUIM 

DESCOBRIR ISSO..













--> OK, AGORA TEMOS 

UM MONTE DE INSTRUCTIONS IMPORTANTES DE SETUP...











POR FIM, A ÚLTIMA INSTRUCTION __ É __ 




'''DEPOIS DE TUDO ISSO ESTAR SETTADO,


QUEREMOS __ COMEÇAR NOSSO SERVER'''..









--> O PROFESSOR DIZ QUE PODERÍAMOS 




ESCREVER 


'RUN node server.js' --------->  MAS __ ISSO __ SERIA INCORRETO..















SERIA INCORRETO __ PQ __ 




ESSE COMANDO __ SERIA EXECUTADO _ SEMPRE QUE 


ESSA 


IMAGE INTEIRA FOSSE 'BUILT' --------> E TODOS NOSSOS COMANDOS,


AQUI,


SÃO 



INSTRUCTIONS _ AO DOCKER PARA _ 'SET UP THE IMAGE'...













--> MAS TENHA EM MENTE:







'''A IMAGE DEVE SER __ O TEMPLATE__ PARA__ O CONTAINER''' --> isso quer dizer que 





A __ IMAGE__ NÃO É O QUE VOCÊ EXECUTA,



PQ _ O QUE VOCÊ VAI EXECUTAR É 



O CONTAINER,




QUE É CRIADO COM BASE EM 1 IMAGE...














-->  ISSO QUER DIZER QUE 


COM O COMANDO DE 

'RUN node server.js',


ACABARÍAMOS 




TENTANDO 


'''INICIAR O SERVER __ DENTRO __ DA IMAGE, DENTRO DA _ CONSTRUCTOR FUNCTION, DENTRO DO TEMPLATE''' -----> 




MAS NÃO QUEREMOS FAZER ISSO.... --> QUEREMOS INSTALAR TODAS AS DEPENDENCIES,
SIM,



QUEREMOS TER TODO CÓDIGO NECESSÁRIO LÁ DENTRO,



MAS _ SÓ _ 

QUEREMOS 


'START A SERVER'

__ SE 





REALMENTE FIZERMOS 'START' DE 1 CONTAINER..... 1 CONTAINER CRIADO A PARTIR DE 1 IMAGE...
















--> TAMBÉM QUEREMOS FAZER ISSO __ PARA_ QUE, 



SE 


STARTARMOS 1 MONTE DE CONTAINERS COM _ BASE__ EM 1 __ MESMA IMAGE,





NÓS TAMBÉM 


STARTEMOS MÚLTIPLOS NODE SERVERS... ------> É POR ISSO QUE 




AQUI TEMOS __ OUTRO COMANDO, DIFERENTE,

QUE É 


O COMANDO DE 



'CMD'..














EX:






CMD node server.js 














--> A DIFERENÇA DE 'RUN' PARA 'CMD' 








É __ QUE __ ISSO (o 'CMD') 





NÃO __ VAI _ SER EXECUTADO __ '''QUANDO A IMAGE É CREATED''',



MAS SIM __ QUANDO 1 CONTAINER__ É STARTADO,


COM BASE NA IMAGE...











--> E É ISSO QUE QUEREMOS, AQUI,


É ASSIM 




QUE QUEREMOS 'RUN' O NOSSO NODE SERVER...








EX:










# ESCOLHEMOS A 'BASE IMAGE', lá do docker hub, que DEVE SER USADA COMO BASE PARA ESSA NOSSA CUSTOM IMAGE (que é o Dockerfile INTEIRO)...
FROM node




# POR DEFAULT, O DOCKER VAI RODAR OS COMANDOS NO 'ROOT' DE SEU PROJETO (e isso não será '/app', o que é um problema) ---> para DEFINIR QUE ESSES COMANDOS SEJAM RODADOS EM ALGUMA OUTRA PASTA QUE NÃO O ROOT, VOCÊ PRECISA DO COMANDO 'WORKDIR'
WORKDIR /app




# AQUI DEFINIMOS, COM 2 PARÂMETROS (''2 pontos'', às vezes), ''''O CAMINHO DAS FILES QUE SERÃO COPIADAS PARA DENTRO DA IMAGE/CONTAINER''''  E ''O CAMINHO EM QUE VIVERÃO ESSES ARQUIVOS, DENTRO DO DOCKER CONTAINER/IMAGE'' (aqui, colocamos 'app')...

#  um 'ponto' no primeiro parâmetro significa que PEGAMOS TODOS OS ARQUIVOS AO REDOR DA NOSSA DOCKER FILE... e 1 'ponto' no segundo parâmetro significa que queremos que OS ARQUIVOS VIVAM NO ROOT do docker container/image...
# COPY . /app

# --> AQUI, COLOCAMOS './'  COMO SEGUNDO PARÂMETRO DO COPY, PQ QUEREMOS QUE __ TODOS OS ARQUIVOS SEJAM COPIADOS PARA DENTRO DO 'WORKING DIRECTORY' dentro do nosso docker container, que no caso é '/app' (definido por 'WORKDIR /app')...
# COPY . ./


# com '/app', ESCLARECEMOS _ DE FORMA ABSOLUTA (absolute path) QUAL É O CAMINHO EM QUE DEVEM SER DEPOSITADOS OS ARQUIVOS (dentro de '/app' folder)...

COPY . /app


# RUN roda quaisquer comandos (aqui, precisamos de npm install) --> POR DEFAULT, O DOCKER VAI RODAR OS COMANDOS NO 'ROOT' DE SEU PROJETO (e isso não será '/app', o que é um problema) ---> para DEFINIR QUE ESSES COMANDOS SEJAM RODADOS EM ALGUMA OUTRA PASTA QUE NÃO O ROOT, VOCÊ PRECISA DO COMANDO 'WORKDIR'

# OBS --> 'RUN' é usado para __ DEFINIR __ O AMBIENTE DE SEU PROJETO ___ NO CONTEXTO DA IMAGE, E NÃO DO CONTAINER... --> para rodar comandos no SEU CONTAINER (a instancia criada com base na image), USE 'CMD'...
RUN npm install





#
CMD 













--> TENHA EM MENTE:



''''1 CONTAINER (e, portanto, a image tbm) __ CONTÉM __ O AMBIENTE + CÓDIGO... É POR ISSO QUE SEU CÓDIGO DEVE IR LÁ DENTRO'''..











OK, MAS COM 'CMD',


A SINTAXE É UM POUCO DIFERENET --> AQUI QUEREMOS PASSAR 1 ARRAY...







 
 DENTRO DO CMD,
 PASSAMOS 

 1 ARRAY DE STRINGS 
 EM QUE 

 SPLITTAMOS 



 NOSSO COMANDO...













 --> É POR ISSO QUE O NEGÓCIO FICA ASSIM:





 CMD ["node", "server.js"]










 EX:










 # O 'CMD' executa COISAS _ DENTRO DO SEU CONTAINER --> é lá que tipicamente queremos 'RODAR 1 SERVER', por exemplo... (e não no contexto da IMAGE, com 'RUN')...
# no 'CMD', seus comandos devem ser passados DENTRO DE 1 ARRAY... (splittados em 1 array)...
 CMD ["node", "server.js"]













 EX:








 
# O 'CMD' executa COISAS _ DENTRO DO SEU CONTAINER --> é lá que tipicamente queremos 'RODAR 1 SERVER', por exemplo... (e não no contexto da IMAGE, com 'RUN')...
# no 'CMD', seus comandos devem ser passados DENTRO DE 1 ARRAY... (splittados em 1 array)...
# agora sempre que 1 container for criado com base nessa nossa image, rodaremos esse comando de 'node server.js'...
 CMD ["node", "server.js"]

















 --> OK, ISSO SIGNIFICA QUE 




 NÓS SEMPRE EXECUTAREMOS 



 ESSE COMANDO DE 'node server.js'


 QUANDO 



 1 CONTAINER 
 FOR RODADO/CRIADO COM BASE NA IMAGE...














 MAS __ SE TENTÁSSEMOS RODAR NOSSO APP ASSIM,


 NÃO SERÍAMOS CAPAZES DE INTERAGIR COM ELE...










 -> PQ ISSO?






 PQ O CONTAINER NÃO ESTARÁ EXPOSTO.. 













 ------> ESSE NODE WEBSERVER __ FAZ LISTEN TO __ NA PORT DE '80'..









 --> ISSO É VISTO NESSA LINHA DE CÓDIGO NODE:






 app.listen(80);










--> esse node webserver faz listen to na porta '80'....












--> E O PROFESSOR MENCIONOU, E ENFATIZOU:






'''1 DOCKER CONTAINER É __ ISOLADO_ DE NOSSO LOCAL ENVIRONMENT ''-->  COMO RESULTADO DISSO,





ELE POSSUI SUA PRÓPRIA 

'INTERNAL NETWORK'... ------> E QUANDO FAZEMOS LISTEN TO 

à PORTA DE '80' 


 


DENTRO DO CONTAINER,



O CONTAINER NÃO EXPÕE ESSA PORTA A NOSSA 'LOCAL MACHINE' --> ISSO QUER DIZER QUE 
NÃO 


SEREMOS CAPAZES DE FAZER LISTEN TO A ESSA PORT 

__ 

SÓ PQ __ ALGO ESTÁ 

FAZENDO 'LISTEN TO' 

DENTRO 


DESSE CONTAINER/DE 1 CONTAINER...














--> É POR ISSO QUE NA DOCKER FILE,





ANTES DE RODARMOS 'CMD' ----> QUE DEVE SEMPRE _ SER __ A ÚLTIMA INSTRUCTION 


NO SEU DOCKER FILE,





__ PODEMOS __ COLOCAR __ A INSTRUCTION DE 'EXPOSE',






PARA __ COMUNICAR AO DOCKER QUE 

QUEREMOS 

DEIXAR 

EXPOSTA 



1 PORT ESPECÍFICA, A NOSSA LOCAL MACHINE, QUE VAI RODAR ESSE CONTAINER --> 





E AÍ _, APENAS ASSIM,
 
 SEREMOS CAPAZES DE RODAR ESSE CONTAINER 


 DE MODO QUE 
 FAZEMOS 'LISTEN TO' 

 A ESSE PORT...









 EX:














 # ESCOLHEMOS A 'BASE IMAGE', lá do docker hub, que DEVE SER USADA COMO BASE PARA ESSA NOSSA CUSTOM IMAGE (que é o Dockerfile INTEIRO)...
FROM node




# POR DEFAULT, O DOCKER VAI RODAR OS COMANDOS NO 'ROOT' DE SEU PROJETO (e isso não será '/app', o que é um problema) ---> para DEFINIR QUE ESSES COMANDOS SEJAM RODADOS EM ALGUMA OUTRA PASTA QUE NÃO O ROOT, VOCÊ PRECISA DO COMANDO 'WORKDIR'
WORKDIR /app




# AQUI DEFINIMOS, COM 2 PARÂMETROS (''2 pontos'', às vezes), ''''O CAMINHO DAS FILES QUE SERÃO COPIADAS PARA DENTRO DA IMAGE/CONTAINER''''  E ''O CAMINHO EM QUE VIVERÃO ESSES ARQUIVOS, DENTRO DO DOCKER CONTAINER/IMAGE'' (aqui, colocamos 'app')...

#  um 'ponto' no primeiro parâmetro significa que PEGAMOS TODOS OS ARQUIVOS AO REDOR DA NOSSA DOCKER FILE... e 1 'ponto' no segundo parâmetro significa que queremos que OS ARQUIVOS VIVAM NO ROOT do docker container/image...
# COPY . /app

# --> AQUI, COLOCAMOS './'  COMO SEGUNDO PARÂMETRO DO COPY, PQ QUEREMOS QUE __ TODOS OS ARQUIVOS SEJAM COPIADOS PARA DENTRO DO 'WORKING DIRECTORY' dentro do nosso docker container, que no caso é '/app' (definido por 'WORKDIR /app')...
# COPY . ./


# com '/app', ESCLARECEMOS _ DE FORMA ABSOLUTA (absolute path) QUAL É O CAMINHO EM QUE DEVEM SER DEPOSITADOS OS ARQUIVOS (dentro de '/app' folder)...

COPY . /app


# RUN roda quaisquer comandos (aqui, precisamos de npm install) --> POR DEFAULT, O DOCKER VAI RODAR OS COMANDOS NO 'ROOT' DE SEU PROJETO (e isso não será '/app', o que é um problema) ---> para DEFINIR QUE ESSES COMANDOS SEJAM RODADOS EM ALGUMA OUTRA PASTA QUE NÃO O ROOT, VOCÊ PRECISA DO COMANDO 'WORKDIR'

# OBS --> 'RUN' é usado para __ DEFINIR __ O AMBIENTE DE SEU PROJETO ___ NO CONTEXTO DA IMAGE, E NÃO DO CONTAINER... --> para rodar comandos no SEU CONTAINER (a instancia criada com base na image), USE 'CMD'...
RUN npm install





# O 'CMD' executa COISAS _ DENTRO DO SEU CONTAINER --> é lá que tipicamente queremos 'RODAR 1 SERVER', por exemplo... (e não no contexto da IMAGE, com 'RUN')...
# no 'CMD', seus comandos devem ser passados DENTRO DE 1 ARRAY... (splittados em 1 array)...
# agora sempre que 1 container for criado com base nessa nossa image, rodaremos esse comando de 'node server.js'...



### o __ EXPOSE__ dos PORTS _deve acontecer __ ANTES_ DO RUN DE COMANDOS NO CONTAINER (com 'CMD')...
EXPOSE 80


### OBS: o 'CMD' SEMPRE DEVE SER RODADO __ POR ÚLTIMO__ nos seus Dockerfile...
 CMD ["node", "server.js"]


































 --> CERTO...







 AGORA DEVEMOS VER 'COMO PODEMOS UTILIZAR ESSA CUSTOM IMAGE,


 FAZER BUILD DELA (criar 1 container),

 E ENTÃO EXECUTAR 1 CONTAINER COM BASE NELA''..