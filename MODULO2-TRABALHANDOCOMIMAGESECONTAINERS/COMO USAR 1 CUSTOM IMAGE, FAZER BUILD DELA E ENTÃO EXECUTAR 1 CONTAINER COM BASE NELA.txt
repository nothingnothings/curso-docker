

NOSSA DOCKERFILE FICOU ASSIM:






FROM node 


WORKDIR /app 

COPY . /app 

RUN npm install 

EXPOSE 80 

CMD ["node", "server.js"]













MAS COMO PODEMOS TRANSFORMAR ISSO EM 1 IMAGE,


PARA ENTÃO __ CONVERTER ISSO EM 1 CONTAINER (finalmente)?










-> BEM,

O PROFESSOR ABRE O TERMINAL...












ELE USA O TERMINAL DO IDE....









--> ok... ali dentro,
o  professor 



roda 




'docker build'...







--> O PROFESSOR _QUER FAZER ISSO _ _PQ __ ELE NÃO QUER 'RUN' UMA IMAGE,



E SIM QUER 'CREATE AN IMAGE'...













--> PROFESSOR QUER CRIAR 1 IMAGE COM BASE NAS INSTRUCTIONS DESSA DOCKER FILE...










--> E É ISSO QUE O COMANDO 'BUILD' FAZ --> ELE DIZ AO DOCKER QUE ELE __ DEVE __ CONSTRUIR UMA 

NOVA 



'NEW CUSTOM IMAGE',




COM BASE 


EM 1 DOCKER FILE...







-----> E COM 'docker build',

PRECISAMOS ESPECIFICAR 'O CAMINHO EM QUE 



O DOCKER SERÁ CAPAZ DE ENCONTRAR A DOCKERFILE' ------> 






E SE COLOCAMOS '.',


ESPECIFICAMOS QUE 

A DOCKER FILE ESTÁ 

NO MESMO FOLDER 

EM QUE 
NOS ENCONTRAMOS...

















--> BASTA RODAR 



docker build .












--> APERTO ENTER,

E ISSO CRIA A MINHA IMAGE:






[+] Building 2.9s (9/9) FINISHED
 => [internal] load build definition from Dockerfile                                                              0.1s 
 => => transferring dockerfile: 2.55kB                                                                            0.0s 
 => [internal] load .dockerignore                                                                                 0.1s 
 => => transferring context: 2B                                                                                   0.0s 
 => [internal] load metadata for docker.io/library/node:latest                                                    0.0s 
 => [1/4] FROM docker.io/library/node                                                                             0.5s 
 => [internal] load build context                                                                                 0.2s 
 => => transferring context: 43.82kB                                                                              0.1s 
 => [2/4] WORKDIR /app                                                                                            0.1s 
 => [3/4] COPY . /app                                                                                             0.1s 
 => [4/4] RUN npm install                                                                                         1.9s 
 => exporting to image                                                                                            0.1s 
 => => exporting layers                                                                                           0.1s 
 => => writing image sha256:354bcb33744624008d9885c13c75bcec5495db0e2fc4c43d4c22746baa72cca6                      0.0s 

Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them















--> COMO VOCÊ PODE PERCEBER, O DOCKER RODOU ALGUMAS ETAPAS, AQUI:




[1/4] FROM docker.io/library/node



[2/4] WORKDIR /app


[3/4] COPY . /app



[4/4] RUN npm install














--> USOU O COMANDO 'FROM'

PARA PEGAR A NODE IMAGE,




-> SETTOU O WORKDIR 





--> COPIOU NOSSO CÓDIGO 





--> RODOU 'npm install' PARA INSTALAR AS DEPENDENCIES...











--> ok... entretanto, no windows as etapas 'EXPOSE' E 'CMD' não aparecem nesse output....
















--> OK, MAS NO FINAL TEMOS 

1 OUTPUT ASSIM:



writing image sha256:354bcb33744624008d9885c13c75bcec5495db0e2fc4c43d4c22746baa72cca6













---> 
TAMBÉM PODEMOS ASSIGNAR CUSTOM NAMES A IMAGES,



MAS POR ENQUANTO PODEMOS PROSSEGUIR ASSIM MSM...















OK, COPIAMOS O ID QUE FOI GERADO...









--> AÍ PODEMOS COPIAR ESSE ID E ENTÃO 



executar o comando de 




docker run ID_COPIADO__..







tipo assim:








docker run sha256:354bcb33744624008d9885c13c75bcec5495db0e2fc4c43d4c22746baa72cca6





















--> OK... ISSO _ VAI _






RODAR O NOSSO CONTAINER...









--> E VOCÊ VERÁ QUE 


ELE 'NUNCA PARA DE RODAR' (mas o meu parou..)






-> o meu container PAROU justamente pq _ 





EU __ DEIXEI 1 ERRO NO CÓDIGO... O IDEAL SERIA DELETAR ESSA IMAGE, E AÍ 


CRIAR 1 NOVA IMAGE,

DESSA VEZ CORRETA...









--> preciso rodar 'docker build .' 

MAIS UMA VEZ...











--> OK... AGORA O RUN DO SERVER DEU CERTO... FICOU RODANDO SEM PARAR...











a razão para isso é que o 


COMANDO QUE EXECUTAMOS ('docker run sha256:b3d3ee64a96607af9c7a0feda9c699b50be2315ee34a7116629a36d2a3840cd3')







COMEÇA UM 'RUNNING SERVER'...











E SERVERS SÃO PROCESSOS QUE NUNCA TERMINAM...








--> o CONTAINER CONTINUA RODANDO,


PQ 


O COMANDO 




QUE __ É EXECUTADO __ QUANDO O CONTAINER É INICIADO _ NUNCA ACABA..












--> MAS VOCÊ VAI PERCEBER QUE __ SE _  VOCÊ TENTAR ACESSAR 

'localhost:80',



AINDA 

NÃO 

CONSEGUIREMOS ACESSAR 

O SITE...







--> O CONTAINER AINDA NÃO CONSEGUIRÁ SER ATINGIDO POR NOSSA LOCAL MACHINE...









OK, MAS O QUE ESTAMOS FAZENDO DE ERRADO?











-_> A PRIMEIRA COISA QUE DEVEMOS FAZER É 'SHUT THE CONTAINER DOWN'...







--> devemos 



rodar docker ps 



PARA VER NOSSOS 

PROCESSOS...








SE VOCÊ ESCREVE 

'docker ps',


VOCÊ 

VÊ APENAS 

OS 

CONTAINERS QUE ESTÃO  RODANDO NO MOMENTO...











------> O CONTAINER AINDA ESTÁ RODNDO, PQ ELE NÃO FECHA AUTOMATICAMENTE...













--> PARA O PARAR,


ESCREVEMOS 
'docker stop + container name/id'...














ex:



docker stop condescending_engelbart















--> ISSO VAI PARAR NOSSO CONTAINER,

E NOSSO SERVIDOR NODE QUE ESTAVA RODANDO DENTRO DELE...











ASSIM QUE ISSO TERMINAR, 


SE VOCÊ 

RODAR DOCKER PS mais uma vez,


Não terá
 
 esse running container...







 --> VOCÊ TEM DE DIGITAR 'docker ps -a'


 PARA VER QUE 

 SEU CONTAINER EXITou...












 ok... ele realmente parou...










 MAS, ENTAÕ,

 O QUE DEU ERRADO?










 PQ NÃO PUDEMOS 

 FAZER 'LISTEN TO'


 A ESSA PORT,

 PARA ESSE CUSTOM CONTAINER?










 --> BEM, É PQ __ FICOU _ FALTANDO 1 ETAPA CRUCIAL...












 --> SIM, A IMAGE SABE QUE DEVE EXPOR A PORT DE '80',


  
  pq escrevemos 


  'EXPOSE 80' -----> O __ CONTAINER É 'AWARE' DO FATO DE QUE ESSA PORT DEVE SER ACESSÍVEL 


  DO LADO DE FORA DO CONTAINER...













  --> ENTRETANTO, AINDA PRECISAMOS __ DIZER__ EXPLICITAMENTE AO __ DOCKER _ QUE 

  QUEREMOS 
  ACESSAR 

  ESSA PORT,



  E 




  ''''EM QUE __ PORT, NA NOSSA LOCAL MACHINE,

  ESSE CONTAINER DEVE SER MAPPEADO '''' --> ISSO __ PQ __ 






  SÓ O FATO DE QUE '''É PORT 80 DENTRO DO DOCKER CONTAINER NETWORK'''


  __ NÃO __ SIGNIFICA 


QUE ESSE SERÁ O MESMO PORT, NA NOSSA LOCAL MACHINE....









---> É POR ISSO QUE O QUE PRECISAMOS FAZER É RODAR ESSE CONTAINER,
SIM,



MAS AÍ 


INCLUIR A FLAG DE 

'-p',










QUE __ É A FLAG DE 'published' -------> ESSA FLAG NOS DEIXA 

COMUNICAR AO DOCKER 




'''SOB QUAL LOCAL PORT, 


QUAL PORT DE NOSSA MACHINE,

ESSE __ INTERNAL-DOCKER CONTAINER PORT __ DEVERÁ _ FICAR ACESSÍVEL'''... ------> 








E A SINTAXE PARA ISSO É ASSIM:








'-p + SUA_LOCAL_PORT' 








(VOCê COLOCA A PORT EM QUE VOCÊ QUER ACESSAR ESSE APP)... ------>







'-p 3000'  



(3000 É A PORT DA MÁQUINA LOCAL QUE QUEREMOS QUE FIQUE MAPPEADA A ESSE CONTAINER )






depois disso,


PRECISAMOS COLOCAR ':'



E ENTAÕ __ A 'INTERNAL, DOCKER-CONTAINER EXPOSED PORT' (



    QUE, NESSE CASO,



    É 

    '80'...
)










--> ISSO QUER DIZER QUE FICAMOS COM UM CÓDIGO DE 









docker run -p 3000:80  sha256:b3d3ee64a96607af9c7a0feda9c699b50be2315ee34a7116629a36d2a3840cd3









--> E AGORA, SE EXECUTARMOS ISSO AÍ,





O DOCKER REALMENTE INICIARÁ ESSE CONTAINER E O MAPPEARÁ 



A PORT DE '3000'


de nossa máquina local (e os requests disparados a 'localhost:3000' entrarão no DOCKER CONTAINER na port de '80')..























EX:












# ESCOLHEMOS A 'BASE IMAGE', lá do docker hub, que DEVE SER USADA COMO BASE PARA ESSA NOSSA CUSTOM IMAGE (que é o Dockerfile INTEIRO)...
FROM node




# POR DEFAULT, O DOCKER VAI RODAR OS COMANDOS NO 'ROOT' DE SEU PROJETO (e isso não será '/app', o que é um problema) ---> para DEFINIR QUE ESSES COMANDOS SEJAM RODADOS EM ALGUMA OUTRA PASTA QUE NÃO O ROOT, VOCÊ PRECISA DO COMANDO 'WORKDIR'
WORKDIR /app




# AQUI DEFINIMOS, COM 2 PARÂMETROS (''2 pontos'', às vezes), ''''O CAMINHO DAS FILES QUE SERÃO COPIADAS PARA DENTRO DA IMAGE/CONTAINER''''  E ''O CAMINHO EM QUE VIVERÃO ESSES ARQUIVOS, DENTRO DO DOCKER CONTAINER/IMAGE'' (aqui, colocamos 'app')...

#  um 'ponto' no primeiro parâmetro significa que PEGAMOS TODOS OS ARQUIVOS AO REDOR DA NOSSA DOCKER FILE... e 1 'ponto' no segundo parâmetro significa que queremos que OS ARQUIVOS VIVAM NO ROOT do docker container/image...
# COPY . /app

# --> AQUI, COLOCAMOS './'  COMO SEGUNDO PARÂMETRO DO COPY, PQ QUEREMOS QUE __ TODOS OS ARQUIVOS SEJAM COPIADOS PARA DENTRO DO 'WORKING DIRECTORY' dentro do nosso docker container, que no caso é '/app' (definido por 'WORKDIR /app')...
# COPY . ./


# com '/app', ESCLARECEMOS _ DE FORMA ABSOLUTA (absolute path) QUAL É O CAMINHO EM QUE DEVEM SER DEPOSITADOS OS ARQUIVOS (dentro de '/app' folder)...

COPY . /app


# RUN roda quaisquer comandos (aqui, precisamos de npm install) --> POR DEFAULT, O DOCKER VAI RODAR OS COMANDOS NO 'ROOT' DE SEU PROJETO (e isso não será '/app', o que é um problema) ---> para DEFINIR QUE ESSES COMANDOS SEJAM RODADOS EM ALGUMA OUTRA PASTA QUE NÃO O ROOT, VOCÊ PRECISA DO COMANDO 'WORKDIR'

# OBS --> 'RUN' é usado para __ DEFINIR __ O AMBIENTE DE SEU PROJETO ___ NO CONTEXTO DA IMAGE, E NÃO DO CONTAINER... --> para rodar comandos no SEU CONTAINER (a instancia criada com base na image), USE 'CMD'...
RUN npm install





# O 'CMD' executa COISAS _ DENTRO DO SEU CONTAINER --> é lá que tipicamente queremos 'RODAR 1 SERVER', por exemplo... (e não no contexto da IMAGE, com 'RUN')...
# no 'CMD', seus comandos devem ser passados DENTRO DE 1 ARRAY... (splittados em 1 array)...
# agora sempre que 1 container for criado com base nessa nossa image, rodaremos esse comando de 'node server.js'...



### o __ EXPOSE__ dos PORTS _deve acontecer __ ANTES_ DO RUN DE COMANDOS NO CONTAINER (com 'CMD')...

#### para conseguirmos EXPOR ESSA PORT A NOSSA 'LOCAL MACHINE', precisamos rodar '''docker run -p port_da_maquina_local_que_queremos_mappear:80 ''''

EXPOSE 80


### OBS: o 'CMD' SEMPRE DEVE SER RODADO __ POR ÚLTIMO__ nos seus Dockerfile...
 CMD ["node", "server.js"]

























 ok... mas isso ainda ESTÁ DANDO ERROR...



 --> parei todos os containers da fidelizou.me....























 OK.... AGORA FUNCIONOU...





 AGORA ESSE CONTAINER REALMENTE ESTÁ RODANDO... --> 



 E SE AGORA TENTAMOS ENTRAR EM 'localhost:3000',











 conseguimos ACESSAR NOSSO APP, QUE ESTÁ RODANDO NESSE CONTAINER...













 --> OK...





 ISSO ESTÁ FUNCIONANDO JUSTAMENTE PQ 


 '''NOSSO CONTAINER ESTÁ SENDO PUBLISHED NA PORT 3000''..














 OK... ISSO QUER DIZER QUE 



 ESSA É NOSSA PRIMEIRA 'CUSTOM IMAGE',



 CRIADA 




 A PARTIR 

 DA 'DEFAULT NODE IMAGE',



 COM NOSSAS PRÓPRIAS INSTRUCTIONS:








 
FROM node
WORKDIR /app




COPY . /app





RUN npm install


EXPOSE 80



CMD ["node", "server.js"]














E NOSSO PRIMEIRO 

'NODE APP'...









--> OK, AINDA TEMOS MTAS PERGUNTAS,




MAS __ 


ESSA 'GENERAL IDEA'



AGORA FAZ MAIS SENTIDO... -> 














------>>>>>>>>> '''''TEMOS 1 CUSTOM IMAGE,

CRIADA A PARTIR DE 1 IMAGE JÁ EXISTENTE (node image),


EM QUE 

TEMOS 1 MONTE DE INSTRUCTIONS (copiar o código, instalar dependencies),

E, AÍ,

CRIAMOS __ ESSA IMAGE,
 

 COM O COMANDO DE 


"""DOCKER BUILD"""",


__ E AÍ _ 

RODAMOS _ 1 CONTAINER, COM BASE NESSA CREATED IMAGE,

COM __ O COMANDO DE 'DOCKER RUN'... ''''''''''













--> OK...







__ E AÍ, AQUI,



ESSE CONTAINER AINDA ESTÁ 'UP AND RUNNING'..






--> SE QUEREMOS PARAR 



NOSSO CONTAINER,


 O PARAMOS 

 COM  




O 'docker stop',

APENAS PRECISAMOS 


DO CONTAINER NAME... ->>











basta 

rodar 


docker stop nome_do_container...











--> É CLARO QUE HÁ JEITOS DE ASSIGNAR SEUS PRÓPRIOS NAMES A SEUS CONTAINERS,



MAS VEREMOS ISSO MAIS TARDE...













VIMOS:






1) COMO BUILDAR SUA PRÓPRIA IMAGE 



2) COMO RODAR ESSA IMAGE, COMO 1 CONTAINER 





3) COMO __ PARAR_  ESSE CONTAINER..







4) MAIS IMPORTANTEMENTE,

DEVEMOS ENTENDER COMO ESSES CONCEITOS FUNCIONAM EM CONJUNTo...