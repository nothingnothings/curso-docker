








AGORA QUE CRIAMOS O SETUP MINIKUBE,

E AGORA QUE TEMOS ESSA VIRTUAL MACHINE COM O 



NOSSO KUBERNETES CLUSTER UP AND RUNNING,








PODEMOS INTERAGIR COM ESSE CLUSTER,






COMEÇAR A MANDAR COMANDOS A ESSE CLUSTER,

PARA FORÇAR O KUBERNETES A FAZER COISAS...











-> ANTES DE FAZERMOS ISSO, PRECISAMOS SABER 'COMO O KUBERNETES FUNCIONA INTERNAMENTE'...





POR 'SABER COMO FUNCIONA INTERNAMENTE',


O PROFESSOR NÃO QUER DIZER 'SABER COMO A ARCHITECTURE SE PARECE',



OU COMO 1 CLUSTER SE PARECE,


E SIM 










'''QUAIS COMMANDS, QUAL SINTAXE,

QUAL LANGUAGE O __ KUBERNETES COMPREENDE''''...








QUEREMSO SABER 'COMO FAZER PARA CRIAR 1 NOVO POD, COMO FAZER 

PARA CRIAR 1 CONTAINER, ETC'...














-- OK... MAS É IMPORTANTE ENTENDER QUE O KUBERNETES FUNCIONA COM AQUILO QUE CHAMAMOS DE 

'OBJECTS'...






 




 -> O KUBERNETES CONHECE ALGUNS OBJECTS,

 COMO 'PODS',



'DEPLOYMENTS',







'SERVICES',


'VOLUMES',


ETC...









->> ELE SABE BEM MAIS DO QUE ISSO,

MAS VEREMOS ESSES OBJECTS EM AÇÃO NESTE E NOS PRÓXIMOS MODULES...














--> A IDEIA POR TRÁS DESSES OBJECTS É SIMPLES:





VC __ PODE CRIAR 1 OBJECT COMO ESSES,



POR MEIO DO EXECUTE DE 1 COMANDO... -> AÍ O KUBERNETES VAI 'TAKE' ESSE OBJECT,
CRIADO 
POR VOCÊ (é apenas uma COISA NO CÓDIGO, NO FINAL DAS CONTAS),




E _ AÍ __ VAI 



ENTÃO 


FAZER ALGUMA COISA,

COM BASE NAS INSTRUCTIONS ENCODADAS NAQUELE OBJECT...















E OS _ OBJECTS KUBERNETES PODEM SER ESCRITOS DE DUAS MANEIRAS:







1) IMPERATIVAMENTE 





2) DECLARATIVAMENTE...














VEREMOS AS DUAS MANEIRAS DE ESCREVER  KUBERNETES,







E VAMOS COMEÇAR COM O APPROACH 'IMPERATIVE',



MAS VEREMOS O OUTRO TAMBÉM,


E 



VAMOS 

DETERMINAR QUAL É PREFERÍVEL...










--> MAS É ISSO QUE O KUBERNETES FUNCIONA,










ELE _ BASICAMENTE QUER OBJECTS,


OBJECTS QUE 

LEVAM AO KUBERNETES 'DOING SOMETHING'...










-> MAS QUANTO A ESSES OBJECTS,

TEMOS 

ALGUNS 

OBJECTS 


COM QUE SEMPRE TRABALHAMOS,





COMO O OBJECT 


'POD'...
















O OBJECT 'POD',

NO KUBERNETES,



É A 'SMALLEST UNIT' QUE 


O 


KUBERNETES CONHECE, E COM QUE CONSEGUE INTERAGIR...















--> OS PODS RODAM NOSSOS CONTAINERS....












--> O KUBERNETES CRIA PODS,

E PODS SEGURAM CONTAINERS... -> E O KUBERNETES FAZ MANAGE DESSES PODS,


E, PORTANTO, OS CONTAINERS,

PARA NÓS...















-> PODEMOS TER 1 OU MAIS CONTAINERS EM 1 MESMO POD.... AMBOS SÃO POSSÍVEIS...













--> ENTRETANTO,


TIPICAMENTE VC 

TERÁ 



1 ÚNICO CONTAINER POR POD...










--> ESSE É O USE-CASE MAIS COMUM,


MAS 


TER MÚLTIPLOS CONTAINERS EM 1 POD AINDA É POSSIVEL..














-> e se vc 


QUISER DIZER AO KUBERNETES QUE 'ELE DEVE CRIAR 1 POD, RODAR 1 CONTAINER,



E FAZER ISSO 

EM ALGUM WORKER NODE, NO CLUSTER',




VC 


DIRIA
 






AO KUBERNETES 



QUE ELE DEVE FAZER ISSO 
 __ POR MEIO _ 


 DA CRIAÇÃO 


 DE 



 1 OBJECT 'POD',

 NO SEU CÓDIGO... --> E, ENTÃO,

 FARIA O SEND 





 DESSE OBJECT AO KUBERNETES... -------> É ASSIM QUE PODEMOS PENSAR NISSO..















MAS OS PODS PODEM SEGURAR 'SHARED RESOURCES' QUE OS CONTAINERS PODEM TER (OS SHARED RESOURCES 

MAIS IMPORTANTES SÃO VOLUMES...)















--> MAS O PROFESSOR FALARÁ de _ VOLUMES E KUBERNETES 


MAIS TARDE,

PQ 
ISSO É DEFINITIVAMENTE ALGO QUE EM QUE PODEMOS 'DIVE DEEPER'...
















OK... MAS O QUE INTERESSA É QUE 'PODS'


TAMBÉM FAZEM PARTE DO CLUSTER,


E, DEVIDO A ESSE FATO,


PODEM 


SE COMUNICAR COM OS OUTROS PODS,



OU ENTÃO COM O MUNDO EXTERNO... --------> ENTRETANTO,


POR DEFAULT,




1 



POD 


SEMPRE COMEÇA COM 

1 

'CLUSTER-INTERNAL IP ADDRESS' ... -------> ISSO É ALGO QUE PODEMOS/PODEREMOS MUDAR,




ou então 'SE COMUNICAR COM _PODS _ MESMO DO LADO DE FORA DO CLUSTER',







MAS, POR DEFAULT,

1 

POD 



TEM 

1 

'CLUSTER-INTERNAL IP ADDRESS',



QUE PODE SER USADO 
PARA ENVIAR REQUESTS ÀQUELE POD (portanto, aos CONTAINERS RODANDO NAQUELE POD)....






















**** SE VC TIVER MÚLTIPLOS CONTAINERS EM 1 MESMO POD,


O PROFESSOR JÁ 

NOS 



APONTA QUE 



''ESSES CONTAINERS VÃO CONSEGUIR COMUNICAR-SE ENTRE SI 

POR MEIO DO ADDRESS DE 'localhost''' '''''












----> NÓS ACOMPANHAMOS AS LIÇÕES DO DEPLOY DE AWS,







E NOS LEMBRAMOS 


DO 'ECS',

EM QUE 


TÍNHAMOS AQUELE 



CONCEITO DE 

'TASKS',









_ AS TASKS _ QUE ERAM AS COISAS QUE SEGURAVAM NOSSOS CONTAINERS -> E, SE TÍNHAMOS 


MÚLTIPLOS CONTAINERS EM 1 MESMA TASK,




ESSES CONTAINERS TAMBÉM CONSEGUIAM
 



 COMUNICAR-SE ENTRE SI COM O 'localhost'  ------> E, DE FATO,



 1 TASK NO 'AWS ECS'



 É _ MT PARECIDA 


 COM 1 'POD' 



 NO MUNDO KUBERNETES...


















 -> ISSO NÃO É ALGO QUE VC PRECISA SABER NECESSARIAMENTE,

  
  PQ __ O KUBERNETES NÃO É ESTRITAMENTE RELACIONADO AO AWS ECS,,





  _MAS ISSO É ALGO QUE O PROFESSOR QUERIA NOS CONTAR, AQUI,




  PQ 




  __ TER ESSA ANALOGIA É ALGO BOM ...
















  --> ainda assim, o professor 



  VAI 

  DAR UMA OLHADA MAIS APROFUNDADA EM 'PODS',

  'NETWORKING' 





  E _ POD VOLUMES __ MAIS TARDE NO CURSO...










  -> POR ENQUANTO, VAMOS FOCAR NO FATO DE QUE 

  TEMOS ESSE POD OBJECT...









  -> FATO DE QUE TEMOS ESSE POD OBJECT,

  E QUE 
  PODEMOS 



  DIZER AO KUBERENTES QUE ELE DEVE 






'CREATE A POD',

RODAR 1 

CONTAINER 

E ENTÃO 




COLOCAR 





AQUELE POD EM ALGUM WORKER NODE, NO CLUSTER,


POR 



MEIO DO CREATE 


DE 


1 DESSES POD OBJECTS,


E POR MEIO 

DO SEND DESSE POD OBJECT,
POR MEIO 
DE 

1 


COMANDO KUBERNETES,







AO KUBERNETES CLUSTER...















--> MAS HÁ 2 COISAS IMPORTANTES QUE DEVEMOS ENTENDER E COMPREENDER, SOBRE PODS...










1a COISA) --> TEMOS QUE ENTENDER QUE 

'PODS SÃO EPHEMERAL' -->  OU SEJA,



OS PODS __ NÃO PERSISTEM --> SE 1 POD É 'REPLACED' OU 'REMOVED'


PELO 
KUBERNETES,



TODOS OS __RESOURCES NO POD,


COMO 


'DATA STORED E CREATED BY A CONTAINER',



SÃO _ PERDIDOS...











MAS ASSIM COMO OS 'CONTAINERS' NO DOCKER,


QUE TINHAM OS __VOLUMES__ PARA PERSISTIR DATA,







NO KUBERNETES TAMBÉM EXISTEM MANEIRAS DE 

__PERSIST DATA --> E ISSO NÃO É UM BUG,

E SIM 

É 

UMA 

'DELIBERATE DESIGN DECISION'...















a ideia de 'pods' NÃO PERSISTIREM DATA É 




PARECIDA 

COM A CORE IDEA DOS CONTAINERS --> PQ OS CONTAINERS TAMBÉM FUNCIONAM ASSIM..












--> SE RODAMOS 1 CONTAINER,

PODEMOS RODAR 

NOSSO APP DENTRO DELE... -> E ESSE APP TAMBÉM PODERÁ 

'STORE AND CREATE FILES' .-..  -.- mas se 




1 container é REMOVIDO DEPOIS DISSO,

E SE TENTAMOS RE-RODAR 


O CONTAINER,

COM BASE NA MESMA IMAGE,



__ AINDA _ VAMOS CONSEGUIR 1 CONTAINER DIFERENTE... E TODA A DATA 

DO CONTAINER 


ANTIGO SERÁ __ LOST__...














E O MESMO ACONTECE PARA PODS... PQ PODS, NO FINAL DAS CONTAS,


SÃO UM 'THIN WRAPPER'

AO REDOR DE CONTAINERS .. -> E É EXATAMENTE 


POR ISSO 


QUE __ COMPARTILHAM VÁRIAS DAS CARACTERÍSTICAS DOS CONTAINERS,




COMO ISSO AÍ,

O FATO DE SEREM 'EPHEMERAL',
E DE 
PERDERMOS 


TODO O STATE DE PODS,

SE ELES 

FOREM 'REMOVED' OU 'REPLACED'..
















A SEGUNDA COISA IMPORTANTE DE ENTENDER É:











2o) -----> PODEMOS CRIAR PODS POR CONTA PRÓPRIA,

E AÍ OS RODAR EM ALGUM WORKER NODE NO NOSSO CLUSTER,




MAS __ ISSO _NÃO SERÁ O QUE QUEREMOS TIPICAMENTE FAZER...  









--> ISSO PQ QUEREMOS __ QUE O PRÓPRIO KUBERNETES FAÇA O MANAGE DOS PODS PARA NÓS...











QUEREMOS QUE O KUBERNETES FAÇA O REMOVE, O REPLACE, 

TUDO ISSO AUTOMÁTICO...









-> QUEREMOS QUE O KUBERNETES FAÇA TUDO ISSO, PQ ESSA É A CORE IDEA POR TRÁS 

DO USO DO KUBERNETES...












--> SE FOSSEMOS USAR O KUBERNETES E AO MESMO TEMPO 


GERENCIÁSSEMOS TUDO POR CONTA PRÓPRIA,

NEM MESMO USARÍAMOS O KUBERNETES...









--> A CORE IDEA DO KUBERNETES É QUE ELE VAI FAZER MANAGE DO NOSSO DEPLOYMENT, PARA NÓS..












--> E É EXATAMENTE POR ISSO QUE NÓS NÃO 'SIMPLY CREATE POD OBJECTS AND SEND THEM TO THE CLUSTER';~








E É EXATAMENTE POR ISSO QUE GERALMENTE CRIAMOS 'CONTROLLER OBJECTS',



ESPECIALMENTE 

O 'DEPLOYMENT OBJECT',


QUE 

VAI ACTUALLY FARÁ O CREATE DESSES PODS PARA NÓS..










-> VEREMOS COMO ESSE DEPLOYMENT OBJECT FUNCIONA __ NA PRÓXIMA AULA...