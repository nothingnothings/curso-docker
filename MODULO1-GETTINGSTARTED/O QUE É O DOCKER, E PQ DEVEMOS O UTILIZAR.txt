












O QUE É O DOCKER?










O DOCKER É UMA 'CONTAINER TECHNOLOGY'...








É USADO PARA _ CRIAR _ E MANAGEAR CONTAINERS...













ESSA É UMA FRASE BONITA,

MAS O QUE ISSO SIGNIFICA?







O QUE É UM CONTAINER EM DEVELOPMENT SOFTWARE,


E COMO DEVEMOS O UTILIZAR?














BEM, 

1
 
 CONTAINER
 em 



 DEV SOFTWARE 


 É UMA 


 'STANDARDIZED UNIT OF SOFTWARE'..








 -----> ESSA EXPRESSÃO 

 BASICAMENTE


 SIGNIFICA 


 '''UM PACOTE DE CÓDIGO (package of code) E __ 


 AS DEPENDÊNCIAS 

 NECESSÁRIAS PARA RODAR ESSE CÓDIGO'''' --> POR EXEMPLO,


 SE VOCÊ 


 ESTÁ RODANDO UM APP NODEJS,



 'nodeJS'


 É UM RUNTIME 

 JAVASCRIPT USADO PARA 

 RODAR 

 CÓDIGO 

 JAVASCRIPT NO SERVER... --> 



 SE VOCÊ 

 TEM UM APP DESSES,

 COM 

 1 CONTAINER,


 CONSTRUÍDO COM O DOCKER,


 VOCÊ 

 PODE 

 TER 

 O SOURCE 

CODE 

DE SEU 

APP 


E 
O 
 
NODEJS 

RUNTIME E QUAISQUER 

FERRAMENTAS 

NECESSÁRIAS

PARA RODAR 

ESSE ´CODIGO



RODANDO NESSE CONTAINER ... --> A VANTAGME É QUE 



ESSE 


MESMO CONTAINER,

COM 



ESSE MESMO CÓDIGO NODEJS E O MESMO 'NODEJS TOOL' (runtime, com a mesma version),





VAI __ SEMPRE __ 



TE DAR __ O EXATO MESMO BEHAVIOR E RESULT ---------> ISSO QUER DIZER QUE 



NUNCA EXISTIRÃO SURPRESAS,



PQ TUDO ESTARÁ 

'BAKED'


PARA DENTRO 


DO CONTAINER,

 


 QUE SEMPRE SERÁ A MESMA COISA... (


    ''''THE SAME CONTAINER __ALWAYS __ YIELDS __ THE EXACT SAME 
    APPLICATION AND EXECUTION BEHAVIOR1 NO MATTER WHERE OR BY WHOM IT MIGHT BE EXECUTED'''
 )












--> MAS ESSE CONCEITO FICA MAIS FÁCIL DE ENTENDER 



SE PROVIDENCIARMOS 1 EXEMPLO:










TEMOS 

1 



CESTA DE PIQUENIQUE -----> TEM TUDO DENTRO,



TEM A COMIDA,

E CONTÉM OS PRATOS --> VOCÊ 

PEGA 


ESSA CESTA DE PIQUENIQUE 



EM TODO 

LUGAR 

QUE VOCÊ 

QUER TER ESSE PIQUENIQUE,

E VOCÊ JÁ ESTÁ 'READY TO GO' -------> VOCÊ TAMBÉM PODE COMPARTILHAR 

ESSE 


PIQUENIQUE 

COM 1 AMIGO,


E ELE TERÁ 

A MESMA EXPERIÊNCIA 




QUE VOCê TERÁ/TEVE ------> NÃO HÁ NENHUMA SURPRESA,

VOCê 


NÃO TEM QUE BUSCAR POR COMIDA,







PQ A COMIDA JÁ ESTÁ LÁ,


E 



A PRATARIA TBM..







----> É A MESMA IDEIA POR TRÁS DOS CONTAINERS E O 'DOCKER '--> QUE É A FERRAMENTA 

USADA 

PARA 

CRIAR E MANAGEAR ESSES CONTAINERS...



















CONTAINER -----> NÃO É UMA COMPARAÇÃO RUIM --> 





É UM CONTAINER QUE CARREGAMOS 

EM 

SHIPS/TRUCKS 


PARA 

MOVER COMIDA --> MESMA IDEIA COM O DOCEKR,



TEMOS 


VÁRIOS CONTAINERS,


E PODEMOS 



COLOCAR MT TRALHA DENTRO 

DOS CONTAINERS,



MAS 

CADA 




'GOODS'

EM 

1 CONTAINER 

NÃO SE MISTURA 




COM OS OUTROS CONTAINERS... -> OS GOODS DE 1 CONTAINER 


NÃO SE MISTURAM 

COM OS OUTROS...












--> CADA CONTAINER FUNCIONA __ STANDALONE_...








--> E CADA CONTAINER PODE SER COLOCADO EM QUALQUER SHIP/TRUCK 

QUE CONSEGUE HANDLAR CONTAINERS...











--> É A MESMA COISA COM OS DOCKER CONTAINERS --> TEMOS AS UNIDADES 

DE SOFTWARE (

NOSSAS PACKAGES, COM CODE E COM AS DEPENDENCIAS PARA O  EXECUTAR 

),



E AÍ 


PODEMOS 


TRAZER ESSE CÓDIGO 

EM QUALQUER 

LUGAR 



EM QUE 

O DOCKER É RODADO...









---> E AÍ PODEMOS RODAR 



EXATAMENTE O MESMO APP,

COM O MESMO 

ENVIRONMENT,



NÃO 

IMPORTANDO A MÁQUINA EM QUE ESTAMOS... -> NÃO PRECISAMOS INSTALAR MAIS TOOLS,

PQ 

TODAS ELAS ESTARÃO DENTRO DO CONTAINER/CONTAINERS..















_> DOCKER É A FERRAMENTA PARA CONSTRUIR ESSES CONTAINERS..







-->  A VANTAGEM 

É QUE 



O SUPORTE A CONTAINERS 


É 'BUILT-IN' 

NA MAIOR 

PARTE 

DOS OPERATING SYSTEMS..









--> E OS OPERATING SYSTEMS MODERNOS 

TODOS SUPORTAM O DOCKER ---> 



E O DOCKER 


SIMPLIFICA E FACILITA 



A CRIAÇÃO E MANAGEMENT 

DESSES CONTAINERS...








(


)







'''SUPPORT FOR CONTAINERS IS BUILT INTO MODERN OPERATING SYSTEMS....'''







''DOCKER SIMPLIFIES THE CREATION AND MANAGEMENT OF SUCH CONTAINERS'''...








--> O DOCKER NÃO É NECESSÁRIO PARA CONSTRUIR CONTAINERS,

MAS 


ELE FACILITA MT ESSA TAREFA..