








---> OK.. AGORA QUE SABEMOS O QUE É O DOCKER 

E O QUE SÃO CONTAINERS,



E PQ 




É BOM OS UTILIZAR... DEVEMOS CONTINUAR...











VEREMOS KUBERNETES MAIS PARA FRENTE...













--> FAZ SENTIDO 


PROCURARMOS UMA SOLUÇÃO COMO 'DOCKERS' E 'CONTAINERS'....








--> VOCÊ PODE SE PERGUNTARR:



'PQ DOCKER, E PQ CONTAINERS'...








ESSE PROBLEMA 


DE 

'REPRODUZIR AMBIENTES'

NAÕ É 


SOLUCIONADO COM VIRTUAL MACHINES E VIRTUAL OPERATING SYSTEMS?














------> NÃO SERIA ESSA UMA SOLUÇÃO?








+ OU - --------> COM VIRTUAL MACHINES,






TEMOS 


NOSSOS:





1) OPERATING SYSTEMS...







2) AÍ A VIRTUAL MACHINE, QUE VIVE DENTRO DO NOSSO COMPUTADOR --> 



ESSA VIRTUAL MACHINE TEM SEU PRÓPRIO OPERATING SYSTEM,



O 'VIRTUAL OS' (que poderá ser O LINUX)...










3) AÍ, DENTRO DESSA VIRTUAL MACHINE,


PODEMOS _ INSTALAR FERRAMENTAS 

EXTRAS,

TUDO O QUE DESEJARMOS,


PQ _ ELA É OUTRA MÁQUINA (só é virtual) ------>





PODEMOS INSTALAR TODAS AS LIBRARIES, DEPENDENCIES

E TOOLS 



DENTRO DESSA MÁQUINA ---> E PODEMOS TRANSPORTAR NOSSO SOURCE CODE PARA DENTRO DELA..














E, COMO ELA É UMA ENCAPSULATED VIRTUAL MACHINE,


COM 


TUDO DE QUE NOSSO PROGRAMA PRECISA, TODAS AS FERRAMENTAS,



__TEMOS 

'KIND OF '


 
 O MESMO 

 RESULTADO __ 



 OBTIDO COM DOCKERS E CONTAINERS... -----> TEMOS UM ENCAPSULATED ENVIRONMENT 

 EM  QUE 


 TUDO 

 É 
 'LOCKED IN'...










 -_> E PODEMOS __ TER 


 MÚLTIPLAS VIRTUAL MACHINES,

 1 PARA 

 CADA PROJECT...






 E PODEMOS COMPARTILHAR 


 VIRTUAL MACHINES COM COLEGAS,


 PARA 




 GARANTIR QUE 

 ESTAMOS 
 TRABALHANDO NO MESMO ENVIRONMENT..














 --> OK, ISSO FUNCIONA,

 MAS HÁ ALGUNS PROBLEMAS GRANDES...












 --> 1 DOS MAIORES PROBLEMAS É 

 O 'VIRTUAL OPERATING SYSTEM',




 ISSO É O 'OVERHEAD'

 QUE 

 TEMOS,


 COM MÚLTIPLAS MÁQUINAS VIRTUAIS...









 --> ISSO PQ _ CADA _ VIRTUAL _ MACHINE É COMO 1 STANDALONE COMPUTER/MACHINE 


 RODANDO 

 EM CIMA 

 DE NOSSA MÁQUINA...









 --> ISSO QUER DIZER QUE 

 SE TIVERMOS 

 1 MONTE DESSAS MÁQUINAS,


 TEREMOS 



 1 MONTE 

 DE ESPAÇO 

 E RESOURCES 

 GASTOS NO NOSSO COMPUTADOR (


    GASTA 1 MONTE DE ESPAÇO NO SEU HARD DRIVE,


    E 

    TENDE A SER LENTO...
 )











 --> ISSO PODE SER 1 PROBLEMA SE VOCÊ TIVER MAIS E MAIS VIRTUAL MACHINES NO 

 NOSSO SISTEMA...











 ISSO PQ __ VOCÊ PODE TER 1 MONTE DE COISAS QUE 
 SEMPRE SERÃO AS MESMAS,


 MAS 

 QUE FICARÃO DUPLICADAS (

    vocÊ terá a mesma versão do linux 

    em vários projetos,
    mas ele 

    terá 
    de existir em todas elas,

    ocupando espaço...


 )










VOCê TAMBÉM PODE TER ALGUMAS TOOLS 

QUE 


EXISTIRÃO 



EM CADA VIRTUAL MACHINE NATIVAMENTE,

E QUE 

TALVEZ 

NÃO SEJAM NECESSÁRIAS NO SEU APP (overhead, de novo)..












PARA RESUMIR:










VANTAGENS DAS VIRTUAL MACHINES:





1) DEIXAM CRIAR SEPARATED ENVIRONMENTS 


2) NOS DEIXAM CRIAR CONFIGURAÇÕES 'ENVIRONMENT-SPECIFIC'... 


3) ENVIRONMENT CONFIGURATIONS PODEM SER COMPARTILHADAS E REPRODUZIDAS FACILMENTE...












DESVANTAGENS:







1) DUPLICAÇÃO REDUNDANTE,

GASTO DE ESPAÇO 




2) PERFORMANCE PODE SER LENTA,


BOOT TIMES PODEM SER LONGOS...







3) APESAR DE SER REPRODUCEABLE 

E SHARABLE,

ISSO 

AINDA PODE SER TRICKY,


PQ __ NÃO EXISTE 



1 

'SINGLE CONFIG FILE'


QUE VOCÊ 




COMPARTILHA --> É 


BEM CHATO 


DE CONFIGURAR TUDO ISSO..

















----> QUER DIZER QUE AS MÁQUINAS VIRTUAIS SOLUCIONAM O PROBLEMA,



MAS 

DE MANEIRA IMPERFEITA..








--> É POR ISSO QUE TEMOS O DOCKER E CONTAINERS...












--> DEVEMOS ENTENDER QUE 'CONTAINERS'  

É __ O CONCEITO-CHAVE ->  DOCKER É 

APENAS 

 


 A TOOL 

 DE FACTO __ 
 PARA _ 

 OS MANAGEAR...










 --> OK, MAS COMO O DOCKER NOS AJUDA A RESOLVER TUDO ISSO,




COMO CONTAINERS 

RESOLVEM

ESSE PROBLEMA 



DE 
1 




MANEIRA MELHOR DO QUE 'VIRTUAL MACHINES'..












-> BEM,

COM CONTAINERS:





1) AINDA TEMOS OPERATING SYSTEMS..







2) MAS DENTRO DE CADA 'OS' NAÕ 

INSTALAMOS MÁQUINAS internas,


E SIM 





USAMOS 

'BUILT-IN CONTAINER SUPPORT' (oferecido por nossos 'OS') -->  OU, ENTÃO, USAMOS 

'EMULATED CONTAINER SUPPORT',


QUE 

É 

ALGO QUE 

É 

PROVIDENCIADO PELO DOCKER...












3) DEPOIS DO USO DO 'BUILT-IN CONTAINER SUPPORT'/EMULATED CONTAINER SUPPORT (pelo docker),


TEMOS 

O USO DA 
'DOCKER ENGINE'...




-> A DOCKER ENGINE 


É __ SETUPPADA PELO DOCKER,
QUANDO O INSTALAMOS... --> AÍ, 

COM BASE 

NESSA DOCKER ENGINE,


QUE 

AGORA RODA NO NOSSO  SISTEMA (é uma tool leve),




PODEMOS 

'SPIN UP'



VÁRIOS CONTAINERS... -->  



E 



ESSES CONTAINERS 

VÃO 

CONTER NOSSO CÓDIGO 

E RUNTIMES 



ESSENCIAIS 

AO NOSSO/NOSSOS APPS... -> MAS CADA CONTAINER NÃO 


VAI CONTER 

'BLOAT',

TOOLS EXTRAS 

OU COISA DO GÊNERO ------> É POSSÍVEL QUE 


CADA 


CONTAINER 

TENHA 
UM 


'SMALL OPERATING SYSTEM LAYER'



no seu interior,



MAS 


MESMO ISSO 


SERÁ 

UMA 

VERSÃO 
MT LIGHTWEIGHT 

DE UM 
OPERATING SYSTEM,



BEM MENOR DO QUE QUALQUER COISA QUE 

VOCê 

INSTALARIA 

NA SUA 

MÁQUINA...












VEREMOS COMO MANAGEAR E CRIAR CONTAINERS NESSE CURSO...








--> A COISA BOA DE CONTAINERS É QUE 


PODEMOS:






CONFIGURAR E DESCREVER NOSSOS CONTAINERS COM 

1 CONFIG FILE,



E AÍ PODEMOS COMPARTILHAR ESSA FILE COM OUTROS,

PARA QUE POSSAM RECONSTRUIR O CONTAINER...














---> OU, VOCÊ PODE BUILDAR O CONTAINER 

EM ALGO QUE 



É CHAMADO DE 'IMAGE' (que vocÊ precisa fazer, de qualquer forma),

E AÍ 

VOCÊ PODE 

COMPARTILHAR 


ESSA IMAGE COM OUTRAS PESSOAS,

PARA QUE 

TODOS 

POSSAM




LAUNCHAR
 


 ESSE MESMO CONTAINER QUE VOCÊ TEM, NO SEU SISTEMA,



 NOS SISTEMAS 

 DELES..













 --> É CLARO QUE ESTUDAREMOS IMAGES E CONTAINERS



 AO LONGO DESSE CURSO..












 --> TEMOS VÁRIAS VANTAGENS DOS CONTAINERS SOBRE AS VIRTUAL MACHINES:








 1) POUCO IMPACTO NA OS,

 MT RÁPIDOS,

 BAIXO USO DE ESPAÇO DE DISCO..
 


2) SHARING, REBUILDING E DISTRIBUTION É MT FÁCIL...







3) ENCAPSULA 'APPS'/'ENVS' 


EM VEZ DE 'MÁQUINAS INTEIRAS'...
















--> VMs --> TÊM MAIOR IMPACTO NO OS, SÃO MAIS LENTAS,  MAIOR USO DE DISCO ...


--> PODEMOS COMPARTILHAR E REUTILIZAR, MAS N É TÃO FÁCIL...



--> VMS ENCAPSULAM 'MÁQUINAS INTEIRAS', EM VEZ DE SÓ APPS/containers...