












-> OK.... ACABAMOS COM ESSE MÓDULO...





ESTUDAMOS UM APLICATIVO MAIS REALISTA,






QUE CONSISTIA DE 3 SERVICES SEPARADOS (

    a backend, a database, e o react SPA...
)










--> COLOCAMOS  OS 3 SERVICES EM CONTAINERS SEPARADOS,
E CADA 1 DELES CONSEGUIA SE COMUNICAR COM O OUTRO...













TODOS OS CONTAINERS CONSEGUIAM FAZER 'PERSIST' DA DATA,
SE NECESSÁRIO...












TAMBÉM FICAMOS COM 'LIVE SOURCE CODE',

quando necessário...













--> aGORA SABEMOS COMO CONSTRUIR 1 APP COMPLETO BÁSICO, COM O DOCKER...










AGORA SABEMOS PITFALLS E PROBLEMAS EM POTENCIAL 




COM ALGUNS DOS APPS,

COMO O 

REACT E O NODE...







------> AGORA SABEMOS COMO FUNCIONA O DOCKER,



A IDEIA POR TRÁS DOS CONTAINERS,

E COMO 
PODEMOS 

COMBINAR 





MÚLTIPLOS CONTAINERS EM 1 APP SÓ...














--> DEVEMOS REVER AS AULAS SE ALGO NÃO FICOU CLARO...







É BEM IMPORTANTE TER ESSA FUNDAÇÃO DE CONTAINERS,


E ENTENDER PQ FAZEMOS CERTAS COISAS, E COMO CERTAS COISAS FUNCIONAM...



















--> MAS O PROFESSOR APONTA ALGO  IMPORTANTE:








ESSE MÓDULO FOI UM MÓDULO SOBRE SETUP DE DEVELOPMENT...














--> TODO ESSE SETUP DOS CONTAINERS FOI 'AIMED AT DEVELOPMENT'...















--> O RECURSO DE AUTO-RELOAD NO FRONTEND E BACKEND 

É ALGO QUE 
QUEREMOS DURANTE O DEVELOPMENT,

MAS NÃO É ALGO QUE 

VAMOS 



QUERER 




DURANTE O DEPLOYMENT STEP,

QUANDO QUISERMOS ENTREGAR O APP AOS USERS...



















--> OK... --> O SETUP DE 1 EASY-TO-USE,



HIGHLY EFFICIENT DEV ENVIRONMENT COM O DOCKER É UMA DAS ÁREAS CHAVES
 




EM QUE O DOCKER É UTILIZADO...












--> HÁ UM MONTE DE DEVELOPERS QUE USAM DOCKER __ APENAS _ EM DEVELOPMENT,

PQ 

PODEM ENCAPSULAR 



SEUS ENVIRONMENT,

E NEM MESMO O UTILIZAM PARA PRODUCTION...















--> OK... MAS É CLARO QUE PRODUCTION E DEPLOYMENT TAMBÉM É COBERTO POR ESSE CURSO,




MAS __ EM 1 MÓDULO SEPARADO,

PQ 

O 

DEPLOYMENT TEM SEUS 

PRÓPRIOS DESAFIOS,

 

 DESAFIOS ADVINDOS 




 NÃO DIRETAMENTE DO DOCKER,



 MAS __ RESULTANTES __ DO FATO DE QUE __ eSTAMOS USANDO O DOKCER...










 --> VEREMOS MAIS DETALHES SOBRE ISSO NA SEÇÃO DE 'DEPLOYMENT'...











 ----> OK... MAS COM TUDO ISSO ACABADO,


 HÁ TAMBÉM ESPAÇO PARA CERTAS MELHORIAS --> 1 PROBLEMA 



 QUE O PROFESSOR 

 PERCEBEU 


 NESSE MODULE É QUE 




 '''FICAMOS COM DOCKER COMMANDS ENORMES'' --> 












OLHE ESTE COMANDO:







docker run 
--name goals-backend   /// EXEMPLO DE 'TAG' NO CONTAINER
--network goal-network  //COMO INSERIR O CONTAINER EM 1 NETWORK
-e MONGODB_USERNAME="arthur" ////COMO INSERIR VALUES PARA AS VARIABLES DE 'ENV', NO PROCESSO DE BUILD (serão passados como 'process.env.MONGODB_USERNAME' e 'process.env.MONGODB_PASSWORD')...
-e MONGODB_PASSWORD="senha"
-v A:\projeto15-DOCKER\MODULO5-CONSTRUINDOMULTICONTAINERAPPSCOMODOCKER\projeto-docker-multi-containers\backend:/app //// COMO FAZER 1 BIND MOUNT
-v goals-backend-logs:/app/logs  ////COMO FAZER 1 NAMED VOLUME
-v /app/node_modules ////COMO FAZER 1 'ANON VOLUME' (necessário, no caso de node_modules)...
-p 80:80  ///// COMO PUBLICAR O CONTAINER EM ALGUMA PORT (lembre-se de definir 'EXPOSE 80' lá no dockerfile)..
node-goals














OK... 














BEM RUIM , ISSO AÍ...








E TEMOS QUE REPETIR ESSE COMANDO _ TODA __ VEZ QUE __ 



CRIAMOS 1 CONTAINER... --> E TEMOS QUE MANTER EM MENTE VÁRIAS COISAS:




1) TEMOS QUE ADICIONAR TODOS OS VOLUMES (os anon volumes, named volumes, bind mounts) 



2) ADICIONAR ENVIRONMENT VARIABLES 



3) ADICIONAR AS NETWORKS 



4) ADICIONAR O NAME DO CONTIANER 





5) ADICIONAR OUTRAS FLAGS( como '-d', '-it', '--rm', '--verbose', etc )















--> E CADA COMANDO DEVE SER RODADO POR CONTA PRÓPRIA --> E ISSO, NO CASO,


NÃO É UMA DEV EXPERIENCE DESEJADA POR NÓS --> É MT FÁCIL ESCREVER 


1 
VOLUME 



DE MANEIRA ERRADA,

E AÍ 

PERDERÍAMOS TEMPO 

PROCURANDO 

O LOCAL EM QUE 


ALGO FOI ESCRITO ERRADO...














SERIA NICE SE PUDÉSSEMOS __ 


DEIXAR DE TER DE LEMBRAR CADA 1 DOS COMANDOS,



E PODER CRIAR 




TODOS OS CONTAINERS 





DE 1 VEZ SÓ,






RODAR APENAS 1 COMANDO,

E COM ISSO 


CRIAR TODOS OS CONTAINERS DE 1 VEZ,


COM TODAS AS SETTINGS NECESSÁRIAS PARA ELES...



















--> O OUTRO PROBLEMA É QUE ESSE SETUP É UM 'DEVELOPMENT-ONLY'...








ESSE SETUP  NÃO ESTÁ OPTIMIZADO PARA PRODUCTION, E NÃO DEVEMOS 


COLOCAR OS CONTAINERS, COMO OS TEMOS AGORA,

EM PRODUCTION...













--> O PROFESSOR VAI FALAR SOBRE PRODUCTION EM 1 MÓDULO SEPARADO,

MAS ELE QUERIA ENFATIZAR ISSO AQUI...











--> NO PRÓXIMO MÓDULO, VEREMOS O PRIMEIRO PROBLEMA... VEREMOS COMO 



TER MAIOR FACILIDADE 


EM RODAR 



PROJETOS COMPLEXOS, COM MÚLTIPLOS CONTAINERS,



NA NOSSA LOCAL DEVELOPMENT MACHINE...