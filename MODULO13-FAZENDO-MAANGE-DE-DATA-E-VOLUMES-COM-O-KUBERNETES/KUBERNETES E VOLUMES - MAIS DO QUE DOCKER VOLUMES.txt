





















ANTES DE ESTUDARMOS KUBERNETES E VOLUMES,

HÁ 

1 

CERTO TERMO QUE O PROFESSOR QUER CLARIFICAR,















'STATE' --> PODERIA SER TRADUZIDO COMO 'DATA' -----> NO FIM DAS CONTAS,


É APENAS DATA QUE FOI CRIADA E USADA POR SEU APP,


DATA QUE NÃO DEVE SER 'LOST'.... (must not be lost)














--> E HÁ DIFERENTES TIPOS DE STATE













1o tipo de state:



1) USER-GENERATED DATA,


como a 'story' que criamos, ou então 1 USER ACCOUNT...








2) INTERMEDIATE RESULTS ------> DATA QUE É DERIVADA DO APP EM SI,

                            QUE TAMBÉM É NECESSÁRIA, MAS QUE EVENTUALMENTE
                            SERÁ 'LOST AND CLEARED'...










-> CERTO.... MAS A USER DATA,


AS USER ACCOUNTS



E QUALQUER COISA QUE SEU APP É 'ABOUT',


ISSO É 

TIPICAMENTE 

ARMAZENADO EM DATABASES,





MAS àS VEZES TAMBÉM É ARMAZENADO EM FILES (como no nosso exemplo, de 'text.txt')...














JÁ OS 'INTERMEDIATE RESULTS' SÃO FREQUENTEMENTE ARMAZENADOS APENAS 


'IN MEMORY',


OU EM 

'TEMPORARY DATABASE TABLES', OU FILES...








-->  MAS NÃO INTERESSA O TIPO DE DATA QUE VC ESTÁ ARMAZENANDO... O QUE INTERESSA 

É QUE 


ESSA DATA PRECISA SER CAPAZ DE SOBREVIVER A CONTAINER RESTARTS (

ESPECIALMENTE O PRIMEIRO TIPO DE DATA, USER DATA..

)










-> E É EXATAMENTE POR ISSO QUE EXISTEM OS 'VOLUMES'...










-> ESSA NÃO É UMA IDEIA ESPECÍFICA AO KUBERNETES,



MAS É EXATAMENTE POR ISSO QUE USAMOS VOLUMES... PQ ESSA DATA IMPORTA,



E PQ __ ELA __ NÃO DEVE SER PERDIDA APENAS PQ __ 1 


CONTAINER FOI STOPPED AND REMOVED...













--> E ISSO ACONTECE TANTO COM O DOCKER, LOCALMENTE,


COMO COM O KUBERNETES, TRABALHANDO COM ELE EM 1 CLUSTER,

DEPLOY EM 1 CLUSTER...











-> ESPECIALMENTE SE TRABALHAMOS COM O KUBERNETES E ESTAMOS PLANEJANDO EM DEPLOYAR NOSSO APP,


PRECISAMOS GARANTIR QUE 'CRUCIAL DATA WILL NOT BE LOST'.. ----> SEU APP NÃO VALERIA 

NADA SE 

SUA 

USER DATA 

DO NADA FICASSE 'GONE'...















OK... É POR ISSO QUE TEMOS VOLUMES....











--> JÁ SABEMOS USAR VOLUMES.... --> E OS VOLUMES AINDA IMPORTAM 


COM O KUBERNETES,




PQ 



AINDA ESTAMOS TRABALHANDO COM CONTAINERS,

NO KUBERNETES...













--> É POR ISSO QUE ESSA SOLUÇÃO DE 'PERSIST' DE DATA,

LÁ DO DOCKER,

NÃO É OBSOLETA,


AINDA É NECESSÁRIA...













ENTRETANTO,



TEMOS QUE TER EM MENTE QUE,

QUANDO 

TRABALHAMOS COM O KUBERNETES,


É ELE QUE FAZ RUN E MANAGE DE NOSSOS CONTAINERS... ----->  NOSSO TRABALHO É 

APENAS 


RODAR O KUBERNETES 

E 

'ORCHESTRATE'


NOSSO CLUSTER E NOSSO DEPLOYMENT COM O KUBERNETES... --> E AÍ O KUBERNETES 

CRIA ESSES PODS,

QUE ENTÃO RODAM NOSSOS CONTAINERS...








ISSO QUER DIZER QUE NÃO FAZEMOS 'LAUNCH' DIRETO DE NOSSOS CONTAINERS...








--> ISSO QUER DIZER, EM OUTRAS PALAVRAS,

QUE 

NÃO PODEMOS 

USAR 

'docker-compose' com o kubernetes,



e que 


NÃO PODEMOS USAR 

'docker run -v' QUANDO USAMOS O KUBERNETES...














--> É POR ISSO QUE PRECISAMOS APRENDER A COLOCAR VOLUMES NO KUBERNETES...








''''KUBERNETES NEEDS TO BE CONFIGURED TO ADD VOLUMES TO OUR CONTAINERS'''...







 
 É ISSO QUE FAREMOS NESSE MODULE,


 

 ADICIONAREMOS 


 VOLUMES AOS CONTAINERS QUE ELE STARTAR PARA NÓS...








 minikube start --driver=hyperv










 