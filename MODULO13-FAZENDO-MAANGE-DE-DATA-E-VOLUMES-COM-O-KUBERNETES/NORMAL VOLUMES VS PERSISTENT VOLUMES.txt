













AO LONGO DAS ÚLTIMAS LIÇÕES, FALAMOS MT SOBRE REGULAR VOLUMES E PERSISTENT VOLUMES...













PODE SER CONFUSO TER ESSES DIFERENTES TIPOS DE VOLUMES....










-- É POR ISSO QUE, NESSA LIÇÃO,


O PROFESSOR QUER COMPARAR OS 2 APPROACHES,


E DEIXAR BEM CLARO O PQ DE EXISTIR OS 2, E AS DIFERENÇAS ENTRE OS DOIS,

E QUAL 


VC DEVE USAR, EM CADA SITUAÇÃO...














MAS 1  COISA QUE O PROFESSOR QUER DEIXAR CLARO:








*** TODO TIPO DE VOLUME TE DEIXA 'PERSIST DATA' --> TANTO OS 'NORMAL' COMO OS 'PERSISTENT'...









1) NORMAL VOLUMES ------> ESSES SÃO DEFINIDOS JUNTO COM A 'POD DEFINITION'....

ELES NÃO SE CHAMAM DE 'PERSIST', MAS ELES TE AJUDAM 

A PERSIST DATA, ISSO É ÓBVIO...

(o nome 'persistent volumes' pode ser deceiving.... todos volumes persistem data)...





--> a ideia por trás de todos os volumes é que 

'''VC TEM DATA EM 1 CONTAINER, DATA QUE NÃO DEVE SER PERDIDA QUANDO O CONTAINER 
RESTARTA, É REMOVIDO OU RECRIADO'''...








-> OK... 'NORMAL VOLUMES' --> é importante 

entender que 

''''ELES SÃO INDEPENDENTES DE CONTAINERS,

MAS __ NÃO SÃO INDEPENDENTES DE __ PODS EM SI''' --->  SÃO ATTACHEADOS 




A 'INDIVIDUAL PODS'


E SEU 
LIFECYCLE --------> ISSO SIGNIFICA QUE SE 1 POD É DELETADO E REMOVIDO,



1 VOLUME ANEXADO A ESSE POD PODERÁ TER SUA DATA TAMBÉM CLEARED --> TUDO DEPENDE 


DO VOLUME TYPE... -------> POR EXEMPLO, O TYPE 'emptyDir'


COMEÇARIA __ VAZIO__  SE O SEU POD FOSSE RECRIADO.. -------> OUTROS VOLUME TYPES,



COMO 

'hostPath'

E CERTOS CLOUD PROVIDER TYPES (como aws, azure, gcp) NÃO PERDERIAM SUA DATA, É CLARO...










--> OK... MAS AINDA ASSIM, A 'VOLUME DEFINITION' E A 'VOLUME CONFIGURATION'


É INTRINSECAMENTE CONECTADA COM 1 

POD.... -------->  É JUSTAMENTE POR ISSO QUE DEFINIMOS E CRIAMOS OS 'REGULAR VOLUMES' 

NO MESMO LUGAR EM QUE DEFINIMOS E CRIAMOS O POD (como em 'deployment.yaml')...






-----> NO LUGAR ONDE DEFINIMOS OS PODS, NÃO SÓ DEFINIMOS 'EM QUE PATH DO CONTAINER 

O VOLUME UTILIZARÁ', MAS TAMBÉM 'O TYPE QUE ESSE VOLUME UTILIZARÁ'...







--> CERTO... VIMOS ISSO TANTO PARA 'emptyDir' como 'hostPath',
 
 nos regular volumes...







 -> OK.... O PROFESSOR DISSE QUE 

 1 DOS PROBLEMAS DESSE TYPE DE VOLUME É QUE 'PERDEMOS A DATA QUANDO O POD É REMOVIDO'...  MAS 

 ISSO SÓ ACONTECE A DEPENDER DO DRIVER/TYPE QUE VC ESTÁ USANDO...











 --> MAS O GRANDE PROBLEMA DOS 'REGULAR VOLUMES',

QUE ACONTECE MESMO QUANDO VC USA 1 TYPE DE VOLUME 

EM QUE 


A DATA NÃO É PERDIDA COM O RESTART DE PODS,

É QUE 




'''REGULAR VOLUMES CAN BE REPETITIVE 
AND HARD TO ADMINISTER ON A GLOBAL LEVEL'''...










------> ok.... podem ser de difícil administração em 1 level global,


isso se vc 'SÓ TRABALHAR COM ESSE TIPO DE VOLUME'...














--> MAS SE VC ESTIVER TRABALHANDO EM APPS PEQUENOS,



OU SE SÓ VC ESTÁ TRABALHANDO NESSE PROJECT,


VC AINDA PODERÁ TER 'MT REPETITION' ----------> IMAGINE DIFERENTES DEPLOYMENTS,

COM DIFERENTES POD TEMPLATES,

E AÍ 


VAMOS 

PRECISAR A MESMA VOLUME CONFIGURATION NESSES DIFERENTES PODS,



VC 


VAI PRECISAR REPETIR O '''MESMO VOLUME-POD SETUP CODE'''



EM TODOS ESSES DIFERENTES PODS ----------> E ISSO PODE SER IRRITANTE....










E SE VC ESTÁ TRABALHANDO EM 1 PROJETO MAIOR,


E SE VC 


É O ADMINISTRADOR RESPONSÁVEL 


PELO SETUP DE TODO O STORAGE E VOLUMES,



VC 

SEMPRE 


VAI PRECISAR IR 

POR DENTRO 


DOS  


__ POD TEMPLATES__ CRIADOS POR SEUS COLEGAS,



TUDO PARA APENAS SETTAR A VOLUME CONFIGURATION LÁ... (e isso pode ser irritante)...















OK... E ESSE É O PROBLEMA ESPECÍFICO

QUE 

PERSISTENT VOLUMES RESOLVEM.... 




















PQ, 
COM 






2) PERSISTENT VOLUMES,





OS VOLUMES NÃO SÃO DEFINIDOS JUNTO DOS PODS (E NÃO SÃO ANEXADOS DIRETAMENTE NOS PODS),


ISSO PQ 

ELES SÃO 'STANDALONE RESOURCES'



NO SEU CLUSTER KUBERNETES,








O QUE QUER DIZER QUE FICAM SOLTOS,


NÃO FICAM ANEXADOS A 1 POD ESPECÍFICO...













--> OS PERSISTENT VOLUMES PODEM SER CRIADOS STANDALONE,




E AÍ __ ELES SÃO 'CLAIMED' POR MEIO DE 'PVCS' (PERSISTENT-VOLUME CLAIMS)...











-> OK... ----> ISSO QUER DIZER QUE SE VC PRECISA DA MESMA 'CONFIGURAÇÃO DE ACESSO' 


AO SEU VOLUME 


EM VÁRIOS PODS/DEPLOYMENTS DIFERENTES,





VC 

SÓ VAI PRECISAR 


CRIAR ESSE PERSISTENT VOLUME CLAIM EM 1 ÚNICO LUGAR, 1 ÚNICO ARQUIVO ('persistent-volume-claim.yaml'),

e aí 


REFERENCIAR O NOME DESSA CLAIM 




NOS LUGARES EM QUE VC QUER USAR ESSE PERSISTENT VOLUME.... 











--> SEU REUSO É BEM MAIS FÁCIL,



E SUA ADMINISTRAÇÃO É BEM MAIS FÁCIL,


SE VC É O ADMIN RESPONSÁVEL PELO MANAGE DE TODO O STORAGE 

E VOLUMES NO CLUSTER... ----------> ISSO QUER DIZER QUE, ESPECIALMENTE 

PARA PROJETOS 
MAIORES,


ESSES PERSISTENT VOLUMES PODEM DEIXAR BEM MAIS FÁCIL 


O MANAGE DE TODAS AS STORAGE OPTIONS E TODOS OS VOLUMES QUE SEU 
CLUSTER 

DEVERÁ SER CAPAZ DE USAR...















-- OK... AÍ OS COLEGAS PODEM FOCAR NO SETUP DOS TEMPLATES 

DOS PODS,


E AÍ 



APENAS PRECISARIAM
 

ESPECIFICAR 'CLAIMS'

 QUE 


 GOSTARIAM DE USAR, SEM PRECISAR ESCREVER NENHUMA VOLUME-SPECIFIC CONFIGURATION 

 LOGIC,

 NOS TEMPLATES DELES... --> ALÉM DISSO,


 FICA 

 MT FÁCIL O MANAGE 

 DOS 


 VOLUMES EM 1 NÍVEL GLOBAL,




 SEM NEM MESMO TOCAR NOS 'POD TEMPLATES'...















 --> POR FIM, VC FICA COM ESSA 'INDEPENDENCE DE PODS E NODES',


 em que vc TEM CERTEZA QUE 


 SUA DATA NÃO SERÁ PERDIDA EM RAZÃO DO RESTART DE ALGUM POD/NODE...










 ---> PQ, COM O PERSISTENT VOLUME, VC 


 SÓ TEM PERMISSÃO PARA USAR VOLUME TYPES QUE 

 ACTUALLY FUNCIONAM DE FORMA INDEPENDENTE 

 DOS NODES EM QUE OS PODS VIVEM,

 E DOS PODS EM  SI...














 --> NÃO EXISTE 1 VOLUME TYPE PIOR DO QUE OUTRO,






 MAS USAR 'PERSISTENT VOLUMES'



 EM 



 1 PROJETO PESSOAL,


 SMALL DEMO PROJECT,




PODE SER OVERKILL.... mas vc pode usar...













MAS EM PROJETOS MAIORES, COM UM MONTE DE PODS E 1 MONTE DE VOLUMES,

E 

1 

MONTE DE PESSOAS TRABALHANDO NO PROJECT,



as coisas ficam bem mais fáceis com eles...