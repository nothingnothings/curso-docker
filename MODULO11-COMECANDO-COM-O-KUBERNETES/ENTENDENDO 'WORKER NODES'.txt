














-> ok... devemos estudar os 'worker nodes'












--> 1 WORKER NODE, CONFORME MENCIONADO, É SIMPLESMENTE  1 COMPUTADOR, UMA INSTANCE,




RODANDO EM ALGUM LUGAR...









E O WORKER NODE É MANAGEADO PELO MASTER NODE,




CONFORME O PROFESSOR EXPLICOU...












(PARA SERMOS MAIS PRECISOS: O QUE __ ACONTECE __ NO WORKER NODE, COMO A CRIAÇÃO DE 1 POD, É ISSO QUE É MANAGEADO PELO MASTER NODE)...
















OK... DENTRO 



DESSE WORKER NODE,




TEMOS NOSSOS PODS:













WORKER NODE {



    POD {
        CONTAINER 
        CONTAINER
    }
}














E 1 POD SIMPLESMENTE SEGURA 1 OU MAIS 


APPLICATION CONTAINERS..







ALÉM DESSES CONTAINERS,
ELE SEGURA OS 'RESOURCES' NECESSÁRIOS A ESSES CONTAINERS 













'A POD HOSTS ONE OR MORE APPLICATION CONTAINERS AND THEIR RESOURCES (volumes, IP, run config)',










E _ _OS PODS__ EM 

SI, NO CASO,


SÃO MANAGEADOS PELO KUBERNETES..











ISSO SIGNIFICA QUE O KUBERNETES (MASTER NODE) PODE 'CREATE' OU 'DELETE' PODS...














-- E QUANDO 1 POD _ É DELETADO____,



O POD, INTERNAMENTE,



É __ ENTÃO CAPAZ _ DE RODAR E MANAGEAR O CONTAINER __ QUE PERTENCE ÀQUELE POD...











--> E É CLARO QUE PODEMOS TER 1 OU MAIS CONTAINERS EM 1 POD...











-> MAS SE VC TEM MÚLTIPLOS CONTAINERS,

CONTAINERS QUE PRECISAM 'WORK TOGETHER CLOSELY',








VC PODERIA TAMBÉM TER MÚLTIPLOS CONTAINERS DENTRO DE 1 MESMO POD...














-> AÍ VC COLOCARIA QUAISQUER VOLUMES ADICIONAIS NECESSÁRIOS, NESSE POD,

COMO 




1 'VOLUME'... (espaço em algum hard drive, com que os CONTAINERS VÃO PODER 'TALK TO')...















A IDEIA PRINCIPAL, NO CASO,

É QUE 

VC 



TENHA MAIS DE 1 POD, DENTRO DE CADA WORKER NODE...












-> MAIS DE 1 POD (com múltiplos containers) 

EM CADA 


WORKER NODE... 














-> OK.... E 1 GIVEN POD PODE __ SER UMA _ CÓPIA de outro pod,

CASO __ VC ESTEJA 'SCALING-IT UP' E __ QUER TER MÚLTIPLAS INSTANCES DE 
1 MESMO CONTAINER UP AND RUNNING PARA DISTRIBUIR O INCOMING TRAFFIC, POR EXEMPLO...






--> MAS ESSE GIVEN POD PODE SER TAMBÉM UM POD COMPLETAMENTE DIFERENTE,


COM 1 CONTAINER TOTALMENTE DIFERENTE NO SEU INTERIOR, PARA REALIZAR UMA TAREFA 

TOTALMENTE DIFERENTE..













-> ISSO PQ O 'WORKER NODE' É SIMPLESMENTE O SEU COMPUTADOR,

É SIMPLESMENTE 1 PC NA INTERNET, 1 COMPUTADOR COM CPU E MEMÓRIA,


E, PORTANTO,

É CLARO QUE PODEMOS RODAR CONTAINERS TOTALMENTE DIFERENTES,

E TASKS TOTALMENTE DIFERENTES,

NELE... 
(
    ASSIM COMO PODEMOS 

    RODAR CONTAINERS TOTALMENTE DIFERENTES, NA NOSSA LOCAL MACHINE...
)















PQ COM O 'DOCKER RUN', 







PODEMOS ESCREVER QUANTAS IMAGES QUISERMOS,



QUANTAS VEZES QUISERMOS...












JÁ FIZEMOS ISSO, COM O DOCKER-COMPOSE,

EM QUE TÍNHAMOS O BACKEND, O FRONTEND E A DATABASE, TODOS RODANDO NA NOSSA LOCAL MACHINE..














--> O MESMO ACONTECE COM O WORKER NODE E COM O KUBERNETES,


SÓ 



A MACHINE SERÁ UMA REMOTE MACHINE,


EXISTENTE EM ALGUM LUGAR DA INTERNET,


OFERECIDA POR 1 CLOUD PROVIDER...













NESSE WORKER NODE,


TEMOS MAIS DO QUE ESSES NODES,



TEMOS MAIS DO QUE PODS...






 O WORKER NODE TEM:









 1) PODS 







 2) ALGUM SOFTWARE ADICIONAL ( o docker, por exemplo, é obrigatório, PQ O DOCKER É USADO, PELOS PODS, PARA CRIAR E RODAR OS CONTAINERS... )






 3) UM 'KUBELET' --> O KUBELET É BASICAMENTE 1 COMMUNICATION DEVICE ENTRE O 'WORKER NODE' E O 'MASTER NODE'...



ISSO QUER DIZER QUE O KUBELET É 1 SOFTWARE/PROGRAMA,

RODANDO 

NO WORKER NODE MACHINE,


QUE 

FAZ A ACTUAL COMMUNICATION COM O MASTER NODE (para que o master node CONSIGA CONTROLAR OS PODS 

NESSE WORKER NODE)






4) POR FIM, TEMOS O ______ PROXY____ --> O PROXY É RESPONSÁVEL PELO HANDLE DE INCOMING 

E OUTGOING TRAFFIC,


PARA GARANTIR QUE TUDO FUNCIONA COMO DESEJADO,


E PARA __ PERMITIR _ QUE APENAS 'ALLOWED TRAFFIC' CHEGUE AOS PODS,

E PARA PERMITIR QUE APENAS 'ALLOWED TRAFFIC' SEJA CAPAZ DE DEIXAR O WORKER NODE...

















--> OK... ESSE É O WORKER NODE...










--> ESSE É O WORKER NODE E O QUE RODA NO SEU INTERIOR...












A COISA ÓTIMA SOBRE O KUBERNETES É QUE APENAS DEFINIMOS O 'DESIRED END STATE',



E ISSO JÁ FAZ COM QUE 




OS CLOUD PROVIDERS, COMO AWS,


SAIBAM 


O QUE FAZER,

QUE 

SERVICES 



CRIAR __ PARA __ SATISFAZER ESSA DEFINITION KUBERNETES QUE VC PROVIDENCIOU... -> AÍ A AWS 



INSTALA E RODA TODO O SOFTWARE NECESSÁRIO PARA VOCÊ, PARA QUE VC N TENHA QUE LIDAR COM ISSO..













--> COMO DEVELOPER, VC SEMPRE DEVE SABER O QUE SEU CÓDIGO E SUAS CONFIGS 


fazem... 