








KUBERNETES PODE NOS AJUDAR COM O PROBLEMA APONTADO NA ÚLTIMA AULA.. 







EX:







OK... MAS O PROBLEMA DE VERDADE, AQUI,
É QUE 

ESTAREMOS 'LOCKED-IN'  AO SERVICE 'ECS' DA AWS..
















-> ISSO QUER DIZER QUE SE TENTARMOS


TROCAR PARA OUTRO SERVICE, POR OUTRO CLOUD PROVIDER,



AS CONFIG FILES PARA O 'AWS ECS'

NÃO VÃO FUNCIONAR LÁ,






PQ AS SETTINGS QUE VC ESCREVER 






para o ECS VÃO FUNCIONAR APENAS COM O ECS,



E NÃO COM OUTROS SERVICES, DE OUTROS CLOUD PROVIDERS,



COMO 


O 'MICROSOFT AZURE'...




















-----> além de ficar 'LOCKED IN' àquele service específico (aws ecs, nesse caso),


SEREMOS FORÇADOS TAMBÉM A APRENDER 

A SINTAXE, SPECIFICS,


SERVICES E CONFIG OPTIONS DESSE PROVIDER... ------> E, SE TROCAMOS PARA OUTRO PROVIDER,


TEREMOS 


DE USAR A SINTAXE DO OUTRO PROVIDER,

E AÍ 
TEREMOS DE MANUALMENTE 


TRADUZIR A CONFIGURATION 


DO AWS ECS 

PARA 



A SINTAXE DESSE OUTRO CLOUD PROVIDER 

















--> O PROBLEMA PRINCIPAL,
PORTANTO,

É QUE 

CONHECER O DOCKER EM SI NÃO SERÁ O SUFIICENTE,


PQ 


AÍ TEREMOS DE APRENDER TAMBÉM SOBRE O 'AWS ECS',



OU SOBRE QUALQUER SISTEMA QUE VAMOS UTILIZAR... -----> MAS ISSO É TOTALMENTE 


FINE,

PQ 


VOCÊ PODE TALVEZ QUERER 


'STICK TO ECS'... ->  assim que 

VC 


APRENDER SOBRE O 'ECS',




VC TERÁ ESSA HABILIDADE, E AÍ VC FICARÁ 'FINE'....










MAS ISSO PODE SER 1 ISSUE...









-. E É AÍ QUE O KUBERNETES PODE NOS AJUDAR....
































------> OK...





COM O KUBERNETES, TEMOS 1 MANEIRA DE DEFINIR NOSSOS DEPLOYMENTS,


O SCALING DE NOSSOS CONTAINERS,







 A MANEIRA PELA QUAL OS CONTAINERS DEVEM SER MONITORED E REPLACED SE FALHAREM,











 TEMOS 1 MANEIRA DE FAZER TUDO ISSO __ DE MANEIRA_  INDEPENDENTE 






 __ DO CLOUD SERVICE QUE ESTAMOS UTILIZANDO...





















 --> ISSO PQ O KUBERNETES É UM 'OPEN-SOURCE SYSTEM',

 E O 

 'DE-FACTO STANDARD'  PARA ORQUESTRAR CONTAINER DEPLOYMENTS 


 E ORQUESTRAR 


 CONTAINERS...















 --> E O KUBERNETES PODE NOS AJUDAR COM TASKS COMO 👍






 1) AUTOMATIC DEPLOYMENT






2) SCALING E LOAD BALANCING 






3) COM O MANAGE DE NOSSO DEPLOYMENT E NOSSOS CONTAINERS, EM GERAL...











--> ELE TAMBÉM NOS AJUDA COM  O MANAGE E DEPLOYMENT DE NOSSOS CONTAINERS EM GERAL...




  

  -> ELE PODE NOS AJUDAR COM O MONITOR DE CONTAINERS E A SUBSTITUIÇÃO AUTOMÁTICA DE CONTAINERS,

  SE ELES 'GO DOWN'...










--> E O KUBERNETES SIMPLESMENTE NOS DEIXA 'WRITE DOWN'


1 __ CONFIGURATION DO 

KUBERNETES --> É QUASE COMO 1 CONFIGURATION FILE 


DO KUBERNETES,




EM QUE DEFINIMOS:





a) DESIRED DEPLOYMENT 




b) QUAIS CONTAINERS QUEREMOS DEPLOYAR 



c) quantas instances,








d) se o APP DEVE SCALE-UP...






E) SE OS CONTAINERS DEVEM SER REPLACED SE FALHAREM, ETC...















COM ISSO, PODEMOS PEGAR ESSA CONFIG, COM CERTAS TOOLS


E PASSÁ-LAS A __ QUALQUER 






__ CLOUD PROVIDER,


OU _ QUALQUER MACHINE __ POSSUÍDA POR NÓS (configurada corretamente),




QUE ENTÃO 

VAI 'PICK UP' ESSAS CONFIG 
DO KUBERNETES 



PARA AÍ 


CRIAR





OS __ RESOURCES E O DEPLOYMENT 

ESPECÍFICADO 



NAQUELA CONFIGURATION DO KUBERNETES..












--> ISSO BASICAMENTE


SIGNIFICA QUE FICAMOS COM '1 ÚNICA MANEIRA DE WRITING DOWN SUCH A CONFIG FILE',


tipo algo assim:









apiVersion: v1
kind: Service 
metadata:
  name: auth-service 
  annotations: 

spec:
  selector:
    app: auth-app 
ports:
  - protocol: TCP 
    port: 80
    targetPort: 8080
type: LoadBalancer















ESSA É A SINTAXE DO KUBERNETES...









VAMOS EXPLORAR ISSO EM GRANDE DETALHE...












E ESSA CONFIG FUNCIONARIA __ COM QUALQUER CLOUD PROVIDER,


DESDE QUE 

ESSE 

CLOUD 
PROVIDER

SUPORTE 

KUBERNETES.... ------> OU, SE ESSE CLOUD PROVIDER NÃO SUPORTAR O KUBERNETES,



VC PODE __ MANUALMENTE INSTALAR 1 SOFTWARE KUBERNETES 

EM QUALQUER MÁQUINA, LOCAL OU REMOTA,




E AÍ 






ESSE SOFTWARE __ VAI _ SER CAPAZ _dE USAR ESSA CONFIG FILE (essa coisa que vc instalou vai entender essas config files)..
















OK.. AÍ VC FICA COM ESSA MANEIRA 'STANDARDIZED'

DE



DESCREVER 


O CONFIG DE MANAGEMENT DE SEUS RESOURCES E SERVICES,



E __ DESDE QUE 


O SERVER QUE VC PLANEJA 
USAR 

CONSIGA 


ENTENDER ESSA SINTAXE KUBERNETES 

E CONSIGA RODAR KUBERNETES,


VC 

PODE 

USAR 

ESSA CONFIG FILE (não interessa o cloud service provider escolhido)...










 
 --> E O QUE É AINDA MELHOR É O FATO DE QUE 

 VC PODE ACTUALLY 


 'MERGE'

 ALGUMAS OPTIONS  




 __ ESPECÍFICAS __ A CLOUD PROVIDERS ESPECÍFICOS __ NESSA CONFIG FILE EM SI... -> 



 ISSO QUER DIZER QUE, 

 SE ALGUM 

 CLOUD PROVIDER 



 PRECISAR DE ALGUMA CONFIGURATION EXTRA,


 VC PODE SIMPLESMENTE 



 ADICIONAR ESSA EXTRA CONFIGURATION  


 NA MAIN FILE... -> E SE EM ALGUM MOMENTO VC DESEJAR USAR ESSA FILE 

  

  DO KUBERNETES COM OUTRO CLOUD PROVIDER,

  VC 

  SÓ PRECISA SUBSTITUIR/REMOVER A CONFIGURATION


  ESPECÍFICA DAQUELE CLOUD PROVIDER 


  DESSE 

  SEU ARQUIVO CONFIG,


  SEM TER DE REESCREVER O ARQUIVO CONFIG INTEIRO...s















  -> OK... ESSA É A IDEIA POR TRÁS DO KUBERNETES; TER ESSA MANEIRA STANDARDIZED 

  DE DESCREVER DEPLOYMENTS..














  OK.. O KUBERNETES É SUPER FORTE,


  MAS 

  PRECISAMOS ESTAR NA MESMA PÁGINA,

  ENTENDER 

  'O QUE É O KUBERNETES',


   

   E O QUE 'NÃO É O KUBERNETES'...












-> MAS ALGUMAS COISAS O KUBERNETES NAÕ É ...












1o ) O KUBERNETES NÃO É UM CLOUD SERVICE PROVIDER... ELE NÃO É UMA ALTERNATIVA 

 
 AO AWS OU AO MICROSOFT AZURE...



















 O KUBERNETES É APENAS UM OPEN-SOURCE PROJECT,


 1 COLLECTION DE CONCEPTS E SOFTWARE, VC PODE DIZER,

 QUE 



 __ PODE SER USADA COM QUALQUER CLOUD PROVIDER...









 2o )  O KUBERNETES NÃO É UM SERVICE PROVIDECIADO POR 1 


 CLOUD PROVIDER --> APESAR 



 DO AWS 

 TER 1 SERVICE QUE NOS AJUDA COM O USO DO KUBERNETES,

 O 

 KUBERNETES 

 EM SI 



 _ É UM OPEN-SOURCE PROJECT,

 E PODE SER 

 USADO 

 COM QUALQUER 





 CLOUD PROVIDER,

 E COM QUALQUER MÁQUINA QUE VC TEM....











 -> ALGUNS PROVIDERS TERÃO SERVICES QUE FARÃO O TRABALHO COM 

 KUBERNETES MAIS FÁCIL,

 MAS 


 O KUBERNETES TECNICAMENTE PODE RODAR EM QUALQUER AMBIENTE...
















--> E É IMPORTANTE ENTENDER:






3o) O KUBERNETES NÃO É APENAS 1 SOFTWARE QUE VC RODA EM 1 MÁQUINA,


PQ NA VERDADE ELE É '1 COLLECTION DE CONCEPTS E TOOLS',




QUE VEREMOS EM AÇÃO NESSE CURSO,

QUE 
PODE 


NOS AJUDAR COM DEPLOYMENT 

EM QUALQUER 

PROVIDER DE NOSSA ESCOLHA...















4o) O KUBERNETES TAMBÉM NÃO É UMA ALTERNATIVA AO DOCKER,


E SIM 

TRABALHA JUNTO COM DOCKER CONTAINERS,

PARA 

DEPLOYAR CONTAINERS EM QUALQUER LUGAR...











5o) NÃO É UM RECURSO PAGO,

É UM FREE OPEN-SOURCE PROJECT...












6o) VOCÊ TALVEZ TERÁ DE PAGAR PELO KUBERNETES SE VC 

ESTIVER USANDO UM 'KUBERNETES-SPECIFIC CLOUD PROVIDER SERVICE' (EKS),



OU ENTÃO 

SE VC USAR O KUBERNETES PARA DEPLOYAR 




A ALGUM CLOUD PROVIDER... -> EM CASOS COMO ESSES,

VC VAI TER DE PAGAR 


OS RESOURCES 



CRIADOS POR AQUELE 

CLOUD PROVIDER...












MAS O USO DO KUBERNETES, POR SI SÓ,
PARA GERENCIAR ESSE PROJECT,


NÃO É PAGO...
















--> VOCê BASICAMENTE PODE PENSAR NO KUBERNETES COMO 

O 

'DOCKER-COMPOSE PARA __ MÚLTIPLAS MÁQUINAS'...













KUBERNETES IS LIKE DOCKER-COMPOSE FOR MULTIPLE MACHINES...













--> PQ O DOCKER-COMPOSE É UMA FERRAMENTA QUE APRENDEMOS QUE NOS 

AJUDA 

A 

MANAGEAR MULTIPLE-CONTAINER PROJECTS NA NOSSA LOCAL MACHINE










--> O DOCKER-COMPOSE TAMBÉM PODE SER USADO COM SINGLE CONTAINER PROJECTS,

PARA EVITAR TER DE ESCREVER LONGOS COMANDOS DE DOCKER RUN...













--> E O KUBERNETES É A MESMA COISA, MAS PARA 'MULTI-MACHINE SETUPS',






PQ __ QUANDO VC FAZ DEPLOY DE SEU APP,

VC 


FAZ ISSO POR MEIO 
DO 
RUN 

 

 DE SUA APPLICATION AO LONGO DE MÚLTIPLAS MÁQUINAS,

 MÚLTIPLOS COMPUTADORES ----> E O KUBERNETES 



 DEIXA O DEPLOY DE SEUS CONTAINERS, 
 MONITOR 

 E RESTART AUTOMÁTICO DOS CONTAINERS,


 AO LONGO DE MÚLTIPLAS MÁQUINAS, SUPER FÁCIL...















 --> É COMO SE FOSSE O DOCKER-COMPOSE,

 COM ALGUMAS 
 FEATURES CONVENIENTES 'DEPLOYMENT-SPECIFIC',




 USADO PARA __ GERENCIAR 


 SUA DOCKERIZED/CONTAINERIZED APPLICATION EM UM SETUP 


 MULTI-MACHINE...












 O KUBERNETES É O DOCKER-COMPOSE PARA DEPLOYMENT...