












-> OK... SE VISITAMOS 'KUBERNETES.IO',






PODEMOS APRENDER MAIS SOBRE KUBERNETES....













--> O PROFESSOR VAI ENSINAR TODOS OS FUNDAMENTALS DO KUBERNETES...













--. É UM 'OPEN-SOURCE SYSTEM PARA AUTOMATING DE __ DEPLOYMENT,
SCALING E MANAGEMENT DE CONTAINERIZED APPLICATIONS'...







----> OU SEJA, 

o KUBERNETES 


NÃO É 1 'SINGLE SOFTWARE',







E SIM __ É UM  SISTEMA_____ .... --> É UMA COLEÇÃO 


DE TOOLS,


DE MANEIRA DE FAZER COISAS,



QUE 

VAI NOS AJUDAR 






___ COM O DEPLOYMENT DE CONTAINERS...


















-> APESAR DE SER 1 BELA FRASE,

NÃO NOS DIZ 





O QUE É O KUBERNETES,


QUAL A VANTAGEM DE O UTILIZAR,

E COMO O UTILIZAR...















--> DEVEMOS COMEÇAR DO INÍCIO..













-> QUANDO FAZEMOS DEPLOY DE CONTAINERS ....













ESQUEÇA O CARÁTER LOCAL DE CONTAINERS,


E PENSE APENAS 

SOBRE O DEPLOYMENT...














--> QUANDO PENSAMOS EM DEPLOYMENT,


TALVEZ 



TENHAMOS 1 PROBLEMA.... --> PENSE NO MANAGE _ _MANUAL__ DE CONTAINERS,,



POR MEIO 

DO MANAGE 

MANUAL DE SERVERS PARA ELES... -------------->  O PROFESSOR BASICAMENTE 


ESTÁ 

FALANDO 




DE INSTANCES EC2,



QUE SÃO 


ESSAS VIRTUAL MACHINES QUE 

PODEMOS CRIAR COM A AWS,









ESSAS VIRTUAL MACHINES EM QUE 

PODEMOS INSTALAR O DOCKER,

PARA AÍ 



PODERMOS RODAR CONTAINERS NELES...













-> É ISSO QUE FIZEMOS DURANTE A SECTION DE DEPLOYMENT 

DO CURSO... --> QUANDO FIZERMOS ESSE DEPLOY,



ENFRENTAREMOS ALGUNS DESAFIOS...














--> ENFRENTAREMOS MAIS DO QUE 'CONFIGURATION E SECURITY CONCERNS'... --> ESSES TAMBÉM 

SÃO 

CONCERNS 



CRÍTICOS,




PQ __ TEREMOS DE MANAGEAR E CONFIGURAR NOSSA EC2 INSTANCE POR CONTA PRÓPRIA... -> PQ AÍ 

TEMOS QUE 

GARANTIR QUE 


O 

OPERATING SYSTEM E SOFTWARE DOS CONTAINERS FIQUE 'UP-TO-DATE'... --> ESSES SÃO 

DESAFIOS,
SIM,
 








 MAS O PROFESSOR NÃO QUER DIZER APENAS ISSO, AQUI...














 -- BEM, IMAGINE QUE VC RODA MANUALMENTE SEUS CONTAINERS,

 NESSA EC2 INSTANCE... --> MESMO SE N TIVÉSSEMOS PROBLEMAS

 DE SEGURANÇA,

 ENFRENTARÍAMOS OUTROS PROBLEMAS...















 PROBLEMA 1 -->  CONTAINERS PODEM 'CRASH' OU 'GO DOWN',


 E __ AÍ __ SERÁ NECESSÁRIO SUBSTITUIR 1 DESSES CONTAINERS POR 1 OUTRO CONTAINER...







ISSO É ALGO QUE __ PODE ACONTECER__... ALGO PODE DAR ERRADO DENTRO DE SUA CONTAINERIZED APPLICATION...




--> ALGUMA COISA PODE FALHAR LÁ,

E ISSO FARÁ COM QUE O CONTAINER INTEIRO CRASHE OU FIQUE UNUSABLE... 







--> SE ALGO ASSIM ACONTECER,

VC __ VAI QUERER __ SUBSTITUIR 

ESSE CONTAINER 

IMEDIATAMENTE COM 1 NOVO CONTAINER RODANDO SEU APP,,








PQ, CASO CONTRÁRIO,

SEU APP DEIXARÁ DE FICAR 'REACHABLE',

SE ELE 


CRASHAR 
E NÃO FOR REPLACED -------------> BEM, QUANDO FAZEMOS DEPLOY MANUAL,


EM UMA 



EC2 INSTANCE,







__ NÓS TAMBÉM TEMOS QUE __ MONITORAR MANUALMENTE 

SE 

ALGUMA COISA CRASHOU,

E AÍ 


TEMOS QUE MANUALMENTE 

RESETTAR CONTAINERS,


DEPOIS DISSO... ------------> E ISSO, OBVIAMENTE,

NAÕ É 


ALGO QUE 


VAMOS QUERER FAZER 




EM APPS MAIORES OU MAIS SÉRIOS... ----------> PQ, QUANDO ESTAMOS DORMINDO,
NAÕ 

ESTAMOS 

MONITORANDO -----> E NÃO PODEMOS FICAR MONITORANDO ALGO O DIA INTEIRO,

 
 FICAR DEDICADO A APENAS RESTARTAR O CONTAINER, O DIA INTEIRO...















 --> É POR ISSO QUE ESSE É UM PROBLEMA QUE PODEMOS ENFRENTAR EM APPS MAIORES...












 --> ALÉM DESSE PROBLEMA,





TALVE PRECISEMOS _ DE MAIS __ CONTAINER INSTANCES 


A __ PARTIR DE TRAFFIC SPIKES -->  PQ SE __ O TRAFFIC AUMENTA DO NADA,





SE TIVERMOS MT WORKLOAD CHEGANDO,

NOSSOS CONTAINERS 



PODEM ACABAR FICANDO 'STUCK'


ACABANDO A PRIMEIRA TASK _ ANTES DE CONSEGUIREM 



HANDLAR O PRÓXIMO REQUEST,


POR EXEMPLO...






-->  É POR ISSO QUE TALVEZ QUEIRAMOS  

'SCALE UP' 

O NÚMERO DE CONTAINERS,



TUDO PARA QUE 




O INCOMING TRAFFIC SEJA DISTRIBUÍDO UNIFORMEMENTE AO LONGO DE MÚLTIPLOS CONTAINERS...















E, É CLARO,

SE TIVERMOS MENOS TRÁFEGO CHEGANDO,

TALVEZ QUEIRAMOS 

__rEMOVER ALGUNS DOS CONTAINERS...
















ATÉ AGORA,

NÃO FALAMOS NADA SOBRE ISSO... -- ATÉ AGORA,

SEMPRE EXECUTAMOS 


1 CONTAINER 


EXATAMENTE 1 ÚNICA VEZ,


TANTO 


NO EC2 COMO NO ECS..













------> ATÉ AGORA,
SEMPRE TIVEMOS APENAS 1 RUNNING INSTANCE DE ALGUM CONTAINER...



--> E, NA REALIDADE, ESSE CONTAINER ÚNICO PODE TALVEZ NÃO SER O SUFICIENTE...  









->  E É CLARO QUE PODEMOS 

USAR 


CONTAINERS PARA COISAS DIFERENTES DE WEB DEVELOPMENT --> DIGAMOS QUE 

VC TEM 1 

CONTAINER QUE 



RODA 1 APP/TASK EM QUE 

VC 
TALVEZ 


TRANSFORME IMAGE FILES... -> NESSE CASO,


SEU CONTAINER 


NÃO SERÁ DEPENDENTE 




DE INCOMING HTTP REQUESTS,


MAS 

VC 

TALVEZ 

ESTEJA 'GOING THROUGH' 


ALGUMAS IMAGE FILES 

QUE 

ESTÃO 

SENDO UPLOADADAS A 1 FOLDER NO CONTAINER... -> E SE MAIS E MAIS FILES 

VÃO CHEGANDO,



SEU CONTAINER PODE ACABAR DEMORANDO MAIS E MAIS PARA 


ACABAR O TRANSFORM DESSAS FILES.. -------> O SPIN UP DE MÚLTIPLOS CONTAINERS,




QUE RODAM A MESMA TASK,

MAS EM DIFERENTES 

FILES,





TALVEZ SEJA A SOLUÇÃO...















--> É POR ISSO QUE TALVEZ SEJA BOM FAZER 'SCALE UP' E 'SCALE DOWN'



DAS CONTAINER INSTANCES DE ACORDO COM O AUMENTO/DIMINUIÇÃO DO SEU TRÁFEGO...
















--> ALÉM DISSO, FALANDO DE TRÁFEGO,

TRÁFEGO HTTP,







TALVEZ TAMBÉM QUEIRAMOS QUE ESSE TRÁFEGO 

SEJA 

'EVENLY DISTRIBUTED'

AO LONGO DE MÚLTIPLAS 

CONTAINER INSTANCES..












--> SE TEMOS APENAS 1 ÚNICA CONTAINER INSTANCE,

NÃO TEREMOS NADA PARA 'DISTRIBUTE',

MAS 




SE TIVERMOS MÚLTIPLAS INSTANCES,

MÚLTIPLAS VERSÕES DO MESMO APP RODANDO (mesmo container, rodando múltiplas vezes),



talvez 

seja 

LEGAL SPLITTAR O INCOMING TRAFFIC 


UNIFORMEMENTE,


PARA QUE 

TODAS AS CONTAINER INSTANCES 

TRABALHEM JUNTAS,

E NENHUMA FIQUE IDLE...













--> É CLARO QUE ESSE CONCEITO DE TER 'MÚLTIPLAS CONTAINER INSTANCES DE 1 MESMO CONTAINER'


É 

RELATIVAMENTE NOVO...












--> O PROFESSOR HAVIA MENCIONADO, ANTERIORMENTE NO CURSO,

QUE 

PODEMOS 


RODAR 

QUANTOS CONTAINERS 

QUISERMOS,




COM BASE EM 1 MESMA IMAGE...



















-------> MAS NO LOCAL DEVELOPMENT E DURANTE O DEPLOYMENT,

ATÉ AGORA,


NUNCA FIZEMOS ISSO,

SEMPRE EXECUTAMOS 




CADA IMAGE APENAS 1 ÚNICA VEZ... -> SEMPRE CRIAMOS 1 ÚNICO CONTAINER 
POR IMAGE...














MAS NO MUNDO REAL,

PARA REAL WEB APPS OU QUALQUER TASK QUE VC ESTÁ CONTAINERIZANDO,


VOCÊ 

__ TALVEZ PRECISE DE MÚLTIPLAS CONTAINER INSTANCES,



BASEADAS EM 1 MESMA IMAGE,


PARA QUE O TRABALHO CONSIGA SER SPLITTADO,

E PARA QUE,


COM MAIORES QUANTIDADES DE INCOMING TRAFFIC,

VC 

TENHA 

MÚLTIPLOS CONTAINERS PREPARADOS PARA TRABALHAR COM ESSA INCOMING WORKLOAD..



















--> esses são alguns dos  problemas que podemos enfrentar,

se 


fazemos deploy MANUAL de containers...
















ex:


1) CONTAINERS MIGHT CRASH/GO DOWN AND NEED TO BE REPLACED 







2) WE MIGHT NEED MORE CONTAINER INSTANCES UPON TRAFFIC SPIKES 







3) INCOMING TRAFFIC SHOULD BE DISTRIBUTED EQUALLY ALONG CONTAINERS...